<?php

use GraphQL\Type\Definition\Type;

final class TypeRegistry_7505d64a54e061b7acd54ccd58b49dc43500b635 implements SilverStripe\GraphQL\Storage\Encode\TypeRegistryInterface
{
    private $types = array();

    /**
     * @param string $name
     * @return bool
     */
    public function hasType($name)
    {
        return method_exists($this, $name);
    }

    /**
     * @param string $name
     * @return Type|null
     */
    public function getType($name)
    {
        if (!isset($this->types[$name])) {
            $this->types[$name] = $this->{$name}();
        }
        return $this->types[$name];
    }

    private function SilverStripe_Assets_Storage_DBFile()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'SilverStripe_Assets_Storage_DBFile',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'Filename',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'args' => array()
                    ),
                    array('name' => 'Hash', 'type' => GraphQL\Type\Definition\Type::string(), 'args' => array()),
                    array('name' => 'Variant', 'type' => GraphQL\Type\Definition\Type::string(), 'args' => array()),
                    array('name' => 'URL', 'type' => GraphQL\Type\Definition\Type::string(), 'args' => array()),
                    array('name' => 'Width', 'type' => GraphQL\Type\Definition\Type::int(), 'args' => array()),
                    array('name' => 'Height', 'type' => GraphQL\Type\Definition\Type::int(), 'args' => array())
                );
            }
        ));
    }

    private function AbrasiveCoatRange()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'AbrasiveCoatRange',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Market',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Theory',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Bells',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readAbrasiveCoatRangesConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readAbrasiveCoatRangesConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readAbrasiveCoatRangesEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readAbrasiveCoatRangesEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readAbrasiveCoatRangesEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('AbrasiveCoatRange'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadAbrasiveCoatRangesSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadAbrasiveCoatRangesSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadAbrasiveCoatRangesSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadAbrasiveCoatRangesSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadAbrasiveCoatRangesSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function SortDirection()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'SortDirection',
            'description' => 'Set order order to either ASC or DESC',
            'values' => array(
                'ASC' => array('value' => 'ASC', 'description' => 'Lowest value to highest.'),
                'DESC' => array('value' => 'DESC', 'description' => 'Highest value to lowest.')
            )
        ));
    }

    private function PageInfo()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'PageInfo',
            'description' => 'Information about pagination in a connection.',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'totalCount',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::int()),
                        'args' => array()
                    ),
                    array(
                        'name' => 'hasNextPage',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::boolean()),
                        'args' => array()
                    ),
                    array(
                        'name' => 'hasPreviousPage',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::boolean()),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function AbrasiveCoatRangeUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'AbrasiveCoatRangeUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Market', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Theory', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Bells', 'type' => GraphQL\Type\Definition\Type::boolean())
                );
            }
        ));
    }

    private function AbrasiveCoatRangeCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'AbrasiveCoatRangeCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Market', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Theory', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Bells', 'type' => GraphQL\Type\Definition\Type::boolean())
                );
            }
        ));
    }

    private function AbrasiveExchangeShade()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'AbrasiveExchangeShade',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Brother',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Airplane',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readAbrasiveExchangeShadesConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readAbrasiveExchangeShadesConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readAbrasiveExchangeShadesEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readAbrasiveExchangeShadesEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readAbrasiveExchangeShadesEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('AbrasiveExchangeShade'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadAbrasiveExchangeShadesSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadAbrasiveExchangeShadesSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadAbrasiveExchangeShadesSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadAbrasiveExchangeShadesSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadAbrasiveExchangeShadesSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function AbrasiveExchangeShadeUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'AbrasiveExchangeShadeUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Brother', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Airplane', 'type' => GraphQL\Type\Definition\Type::boolean())
                );
            }
        ));
    }

    private function AbrasiveExchangeShadeCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'AbrasiveExchangeShadeCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Brother', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Airplane', 'type' => GraphQL\Type\Definition\Type::boolean())
                );
            }
        ));
    }

    private function AbsentLadybug()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'AbsentLadybug',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Ghost',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Pleasure',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Cave',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sea',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Haircut',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readAbsentLadybugsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readAbsentLadybugsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readAbsentLadybugsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readAbsentLadybugsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readAbsentLadybugsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('AbsentLadybug'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadAbsentLadybugsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadAbsentLadybugsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadAbsentLadybugsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadAbsentLadybugsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadAbsentLadybugsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function AbsentLadybugUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'AbsentLadybugUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Ghost', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Pleasure', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Cave', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Sea', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Haircut', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'PoisedFruitAgreementID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function AbsentLadybugCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'AbsentLadybugCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Ghost', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Pleasure', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Cave', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Sea', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Haircut', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'PoisedFruitAgreementID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function AbundantTiger()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'AbundantTiger',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Control',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Snakes',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Soaps',
                        'type' => $this->getType('SoapsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => array(
                                'SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver',
                                'resolve'
                            ),
                            'parentResolverFactory' => null,
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    )
                );
            }
        ));
    }

    private function readAbundantTigersConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readAbundantTigersConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readAbundantTigersEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readAbundantTigersEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readAbundantTigersEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('AbundantTiger'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadAbundantTigersSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadAbundantTigersSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadAbundantTigersSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadAbundantTigersSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadAbundantTigersSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function AbundantTigerUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'AbundantTigerUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Control', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Snakes', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CastID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function AbundantTigerCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'AbundantTigerCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Control', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Snakes', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CastID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function SoapsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'SoapsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('SoapsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function SoapsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'SoapsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Soap'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function SoapsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'SoapsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('SoapsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function SoapsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'SoapsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function ActuallyMittenActivity()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'ActuallyMittenActivity',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Division',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Religion',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Current',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Pigs',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Pencil',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readActuallyMittenActivitiesConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readActuallyMittenActivitiesConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readActuallyMittenActivitiesEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readActuallyMittenActivitiesEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readActuallyMittenActivitiesEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('ActuallyMittenActivity'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadActuallyMittenActivitiesSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadActuallyMittenActivitiesSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadActuallyMittenActivitiesSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadActuallyMittenActivitiesSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadActuallyMittenActivitiesSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function ActuallyMittenActivityUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ActuallyMittenActivityUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Division', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Religion', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Current', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Pigs', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Pencil', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'BriefSparkHospitalID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'MeatySuitID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'ReconditeYardID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'CuriousSparkThreadID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function ActuallyMittenActivityCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ActuallyMittenActivityCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Division', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Religion', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Current', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Pigs', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Pencil', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'BriefSparkHospitalID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'MeatySuitID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'ReconditeYardID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'CuriousSparkThreadID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function Advertisement()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'Advertisement',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Porter',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Division',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readAdvertisementsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readAdvertisementsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readAdvertisementsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readAdvertisementsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readAdvertisementsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Advertisement'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadAdvertisementsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadAdvertisementsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadAdvertisementsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadAdvertisementsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadAdvertisementsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function AdvertisementUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'AdvertisementUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Porter', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Division', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'MightyTrainDoorID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'CutShadeID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'ProfuseFairiesID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'FierceWoolID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'BrightSofaID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'TradeID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'GlisteningDropRoomID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function AdvertisementCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'AdvertisementCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Porter', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Division', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'MightyTrainDoorID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'CutShadeID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'ProfuseFairiesID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'FierceWoolID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'BrightSofaID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'TradeID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'GlisteningDropRoomID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function AggressiveStretchPigs()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'AggressiveStretchPigs',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'Cap',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Umbrella',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Regret',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Station',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Chickens',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Pigs',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ActuallyMittenActivities',
                        'type' => $this->getType('ActuallyMittenActivitiesConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => array(
                                'SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver',
                                'resolve'
                            ),
                            'parentResolverFactory' => null,
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'Popcorns',
                        'type' => $this->getType('PopcornsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => array(
                                'SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver',
                                'resolve'
                            ),
                            'parentResolverFactory' => null,
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    )
                );
            }
        ));
    }

    private function readAggressiveStretchPigssConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readAggressiveStretchPigssConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readAggressiveStretchPigssEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readAggressiveStretchPigssEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readAggressiveStretchPigssEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('AggressiveStretchPigs'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadAggressiveStretchPigssSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadAggressiveStretchPigssSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadAggressiveStretchPigssSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadAggressiveStretchPigssSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadAggressiveStretchPigssSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function AggressiveStretchPigsUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'AggressiveStretchPigsUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Regret', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Station', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Chickens', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Pigs', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Cap', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Umbrella', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'StrawID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function AggressiveStretchPigsCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'AggressiveStretchPigsCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Regret', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Station', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Chickens', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Pigs', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Cap', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Umbrella', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'StrawID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function ActuallyMittenActivitiesConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'ActuallyMittenActivitiesConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('ActuallyMittenActivitiesEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ActuallyMittenActivitiesEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'ActuallyMittenActivitiesEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('ActuallyMittenActivity'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ActuallyMittenActivitiesSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ActuallyMittenActivitiesSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ActuallyMittenActivitiesSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ActuallyMittenActivitiesSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ActuallyMittenActivitiesSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function PopcornsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'PopcornsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('PopcornsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function PopcornsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'PopcornsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Popcorn'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function PopcornsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'PopcornsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PopcornsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function PopcornsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'PopcornsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function Agreement()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'Agreement',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Station',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Soap',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Doctors',
                        'type' => $this->getType('DoctorsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => array(
                                'SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver',
                                'resolve'
                            ),
                            'parentResolverFactory' => null,
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'HappyMoveReasons',
                        'type' => $this->getType('HappyMoveReasonsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => array(
                                'SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver',
                                'resolve'
                            ),
                            'parentResolverFactory' => null,
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    )
                );
            }
        ));
    }

    private function readAgreementsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readAgreementsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readAgreementsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readAgreementsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readAgreementsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Agreement'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadAgreementsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadAgreementsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadAgreementsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadAgreementsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadAgreementsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function AgreementUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'AgreementUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Station', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Soap', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'WoodenBulbID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'BriefSparkHospitalID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'SuddenIceTradeID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'SpotID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function AgreementCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'AgreementCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Station', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Soap', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'WoodenBulbID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'BriefSparkHospitalID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'SuddenIceTradeID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'SpotID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function DoctorsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'DoctorsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('DoctorsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function DoctorsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'DoctorsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Doctor'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function DoctorsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'DoctorsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('DoctorsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function DoctorsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'DoctorsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function HappyMoveReasonsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'HappyMoveReasonsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('HappyMoveReasonsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function HappyMoveReasonsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'HappyMoveReasonsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('HappyMoveReason'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function HappyMoveReasonsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'HappyMoveReasonsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('HappyMoveReasonsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function HappyMoveReasonsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'HappyMoveReasonsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function AheadFairiesBridge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'AheadFairiesBridge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Beef',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Bridge',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readAheadFairiesBridgesConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readAheadFairiesBridgesConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readAheadFairiesBridgesEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readAheadFairiesBridgesEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readAheadFairiesBridgesEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('AheadFairiesBridge'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadAheadFairiesBridgesSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadAheadFairiesBridgesSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadAheadFairiesBridgesSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadAheadFairiesBridgesSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadAheadFairiesBridgesSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function AheadFairiesBridgeUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'AheadFairiesBridgeUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Beef', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Bridge', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LamentableFactWheelID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function AheadFairiesBridgeCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'AheadFairiesBridgeCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Beef', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Bridge', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LamentableFactWheelID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function AheadFriend()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'AheadFriend',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Quiet',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Rabbits',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Current',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Cars',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Hobbies',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Cakess',
                        'type' => $this->getType('CakessConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => array(
                                'SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver',
                                'resolve'
                            ),
                            'parentResolverFactory' => null,
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    )
                );
            }
        ));
    }

    private function readAheadFriendsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readAheadFriendsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readAheadFriendsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readAheadFriendsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readAheadFriendsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('AheadFriend'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadAheadFriendsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadAheadFriendsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadAheadFriendsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadAheadFriendsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadAheadFriendsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function AheadFriendUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'AheadFriendUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Quiet', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Rabbits', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Current', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Cars', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Hobbies', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShortIceID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'LamentableWriterMoveID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'RightSignID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function AheadFriendCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'AheadFriendCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Quiet', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Rabbits', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Current', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Cars', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Hobbies', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShortIceID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'LamentableWriterMoveID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'RightSignID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function CakessConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'CakessConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('CakessEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function CakessEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'CakessEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Cakes'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function CakessSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'CakessSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('CakessSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function CakessSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'CakessSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function AlikeSheep()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'AlikeSheep',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'War',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Cap',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Support',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readAlikeSheepsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readAlikeSheepsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readAlikeSheepsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readAlikeSheepsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readAlikeSheepsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('AlikeSheep'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadAlikeSheepsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadAlikeSheepsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadAlikeSheepsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadAlikeSheepsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadAlikeSheepsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function AlikeSheepUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'AlikeSheepUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'War', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Cap', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Support', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'HistoricalSlipID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'QuarrelsomeRabbitsID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function AlikeSheepCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'AlikeSheepCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'War', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Cap', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Support', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'HistoricalSlipID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'QuarrelsomeRabbitsID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function AlikeSwing()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'AlikeSwing',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Yak',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Question',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readAlikeSwingsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readAlikeSwingsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readAlikeSwingsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readAlikeSwingsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readAlikeSwingsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('AlikeSwing'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadAlikeSwingsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadAlikeSwingsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadAlikeSwingsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadAlikeSwingsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadAlikeSwingsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function AlikeSwingUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'AlikeSwingUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Yak', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Question', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'PointID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'ShortIceID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'DoctorID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'BellsID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function AlikeSwingCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'AlikeSwingCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Yak', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Question', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'PointID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'ShortIceID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'DoctorID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'BellsID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function AmbiguousDuck()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'AmbiguousDuck',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Shade',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Road',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readAmbiguousDucksConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readAmbiguousDucksConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readAmbiguousDucksEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readAmbiguousDucksEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readAmbiguousDucksEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('AmbiguousDuck'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadAmbiguousDucksSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadAmbiguousDucksSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadAmbiguousDucksSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadAmbiguousDucksSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadAmbiguousDucksSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function AmbiguousDuckUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'AmbiguousDuckUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Shade', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Road', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'DropID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'ChickensID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'SmellySmokeCastID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function AmbiguousDuckCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'AmbiguousDuckCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Shade', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Road', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'DropID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'ChickensID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'SmellySmokeCastID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function Angle()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'Angle',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Veil',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'End',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Channels',
                        'type' => $this->getType('ChannelsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => array(
                                'SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver',
                                'resolve'
                            ),
                            'parentResolverFactory' => null,
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'TabooFears',
                        'type' => $this->getType('TabooFearsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => array(
                                'SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver',
                                'resolve'
                            ),
                            'parentResolverFactory' => null,
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    )
                );
            }
        ));
    }

    private function readAnglesConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readAnglesConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readAnglesEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readAnglesEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readAnglesEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Angle'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadAnglesSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadAnglesSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadAnglesSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadAnglesSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadAnglesSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function AngleUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'AngleUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Veil', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'End', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'YardID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'LamentableFactWheelID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'AgreementID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'CurvedWashTopID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function AngleCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'AngleCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Veil', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'End', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'YardID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'LamentableFactWheelID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'AgreementID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'CurvedWashTopID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function ChannelsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'ChannelsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('ChannelsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ChannelsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'ChannelsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Channel'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ChannelsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ChannelsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ChannelsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ChannelsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ChannelsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function TabooFearsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'TabooFearsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('TabooFearsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function TabooFearsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'TabooFearsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('TabooFear'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function TabooFearsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'TabooFearsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('TabooFearsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function TabooFearsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'TabooFearsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function AttractiveQuietHospital()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'AttractiveQuietHospital',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Dirt',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readAttractiveQuietHospitalsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readAttractiveQuietHospitalsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readAttractiveQuietHospitalsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readAttractiveQuietHospitalsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readAttractiveQuietHospitalsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('AttractiveQuietHospital'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadAttractiveQuietHospitalsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadAttractiveQuietHospitalsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadAttractiveQuietHospitalsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadAttractiveQuietHospitalsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadAttractiveQuietHospitalsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function AttractiveQuietHospitalUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'AttractiveQuietHospitalUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Dirt', 'type' => GraphQL\Type\Definition\Type::int())
                );
            }
        ));
    }

    private function AttractiveQuietHospitalCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'AttractiveQuietHospitalCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Dirt', 'type' => GraphQL\Type\Definition\Type::int())
                );
            }
        ));
    }

    private function AttractiveQuietHospitalWithDescendants()
    {
        return new \GraphQL\Type\Definition\UnionType(array(
            'name' => 'AttractiveQuietHospitalWithDescendants',
            'resolveType' => SilverStripe\GraphQL\Resolvers\UnionResolverFactory::create(array())->createClosure($this),
            'types' => SilverStripe\GraphQL\Storage\Encode\UnionTypeFactory::create(array(
                'types' => array(
                    'AttractiveQuietHospital',
                    'ThoughtlessObservation'
                )
            ))->createClosure($this)
        ));
    }

    private function Baby()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'Baby',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Profit',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readBabiesConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readBabiesConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readBabiesEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readBabiesEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readBabiesEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Baby'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadBabiesSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadBabiesSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadBabiesSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadBabiesSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadBabiesSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function BabyUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'BabyUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Profit', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ChickensID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'DinosaursID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'SturdyBabiesHospitalID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function BabyCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'BabyCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Profit', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ChickensID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'DinosaursID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'SturdyBabiesHospitalID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function Badge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'Badge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Baby',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Line',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readBadgesConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readBadgesConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readBadgesEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readBadgesEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readBadgesEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Badge'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadBadgesSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadBadgesSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadBadgesSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadBadgesSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadBadgesSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function BadgeUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'BadgeUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Baby', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Line', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'BellsID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function BadgeCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'BadgeCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Baby', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Line', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'BellsID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function Bells()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'Bells',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Adjustment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Agreement',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Bulb',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Popcorn',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Cake',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Pencil',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Pleasure',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Office',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Boot',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readBellssConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readBellssConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readBellssEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readBellssEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readBellssEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Bells'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadBellssSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadBellssSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadBellssSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadBellssSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadBellssSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function BellsUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'BellsUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Adjustment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Agreement', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Bulb', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Popcorn', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Cake', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Pencil', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Pleasure', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Office', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Boot', 'type' => GraphQL\Type\Definition\Type::int())
                );
            }
        ));
    }

    private function BellsCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'BellsCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Adjustment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Agreement', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Bulb', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Popcorn', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Cake', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Pencil', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Pleasure', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Office', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Boot', 'type' => GraphQL\Type\Definition\Type::int())
                );
            }
        ));
    }

    private function BerserkQuestion()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'BerserkQuestion',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Slip',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Playground',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Shade',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Umbrella',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Fear',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readBerserkQuestionsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readBerserkQuestionsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readBerserkQuestionsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readBerserkQuestionsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readBerserkQuestionsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('BerserkQuestion'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadBerserkQuestionsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadBerserkQuestionsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadBerserkQuestionsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadBerserkQuestionsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadBerserkQuestionsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function BerserkQuestionUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'BerserkQuestionUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Slip', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Playground', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Shade', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Umbrella', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Fear', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'PastEndID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'CarsID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'CeaselessKittensID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function BerserkQuestionCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'BerserkQuestionCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Slip', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Playground', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Shade', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Umbrella', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Fear', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'PastEndID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'CarsID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'CeaselessKittensID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function Boot()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'Boot',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Basket',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Advertisement',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Smell',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Station',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Feeling',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Things',
                        'type' => $this->getType('ThingsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => array(
                                'SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver',
                                'resolve'
                            ),
                            'parentResolverFactory' => null,
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    )
                );
            }
        ));
    }

    private function readBootsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readBootsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readBootsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readBootsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readBootsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Boot'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadBootsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadBootsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadBootsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadBootsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadBootsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function BootUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'BootUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Basket', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Advertisement', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Smell', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Station', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Feeling', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'BriefSparkHospitalID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function BootCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'BootCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Basket', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Advertisement', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Smell', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Station', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Feeling', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'BriefSparkHospitalID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function ThingsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'ThingsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('ThingsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ThingsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'ThingsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Thing'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ThingsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ThingsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ThingsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ThingsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ThingsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function BoundlessDoctorBead()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'BoundlessDoctorBead',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Pleasure',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Ladybug',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sock',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'BrightSofas',
                        'type' => $this->getType('BrightSofasConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => array(
                                'SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver',
                                'resolve'
                            ),
                            'parentResolverFactory' => null,
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'TightfistedChannelDivisions',
                        'type' => $this->getType('TightfistedChannelDivisionsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => array(
                                'SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver',
                                'resolve'
                            ),
                            'parentResolverFactory' => null,
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    )
                );
            }
        ));
    }

    private function readBoundlessDoctorBeadsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readBoundlessDoctorBeadsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readBoundlessDoctorBeadsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readBoundlessDoctorBeadsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readBoundlessDoctorBeadsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('BoundlessDoctorBead'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadBoundlessDoctorBeadsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadBoundlessDoctorBeadsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadBoundlessDoctorBeadsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadBoundlessDoctorBeadsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadBoundlessDoctorBeadsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function BoundlessDoctorBeadUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'BoundlessDoctorBeadUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Pleasure', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Ladybug', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sock', 'type' => GraphQL\Type\Definition\Type::int())
                );
            }
        ));
    }

    private function BoundlessDoctorBeadCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'BoundlessDoctorBeadCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Pleasure', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Ladybug', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sock', 'type' => GraphQL\Type\Definition\Type::int())
                );
            }
        ));
    }

    private function BrightSofasConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'BrightSofasConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('BrightSofasEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function BrightSofasEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'BrightSofasEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('BrightSofa'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function BrightSofasSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'BrightSofasSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('BrightSofasSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function BrightSofasSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'BrightSofasSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function TightfistedChannelDivisionsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'TightfistedChannelDivisionsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('TightfistedChannelDivisionsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function TightfistedChannelDivisionsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'TightfistedChannelDivisionsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('TightfistedChannelDivision'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function TightfistedChannelDivisionsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'TightfistedChannelDivisionsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('TightfistedChannelDivisionsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function TightfistedChannelDivisionsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'TightfistedChannelDivisionsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function Bridge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'Bridge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Adjustment',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Scarf',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Crib',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readBridgesConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readBridgesConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readBridgesEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readBridgesEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readBridgesEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Bridge'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadBridgesSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadBridgesSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadBridgesSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadBridgesSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadBridgesSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function BridgeUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'BridgeUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Adjustment', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Scarf', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Crib', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'CravenStomachAdjustmentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'WakefulRubID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'ChickensID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'BumpyCaveID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function BridgeCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'BridgeCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Adjustment', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Scarf', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Crib', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'CravenStomachAdjustmentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'WakefulRubID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'ChickensID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'BumpyCaveID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function BriefSparkHospital()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'BriefSparkHospital',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Babies',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Wash',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sign',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Playground',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Trouble',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Vest',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Pleasure',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readBriefSparkHospitalsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readBriefSparkHospitalsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readBriefSparkHospitalsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readBriefSparkHospitalsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readBriefSparkHospitalsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('BriefSparkHospital'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadBriefSparkHospitalsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadBriefSparkHospitalsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadBriefSparkHospitalsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadBriefSparkHospitalsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadBriefSparkHospitalsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function BriefSparkHospitalUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'BriefSparkHospitalUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Babies', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Wash', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Sign', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Playground', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'KeyID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'CapriciousTitleID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'PanickyBeefPullID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Trouble', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Vest', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Pleasure', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'PleasantRangeID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'StrawID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'SheepID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function BriefSparkHospitalCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'BriefSparkHospitalCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Babies', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Wash', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Sign', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Playground', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'KeyID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'CapriciousTitleID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'PanickyBeefPullID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Trouble', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Vest', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Pleasure', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'PleasantRangeID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'StrawID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'SheepID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function BrightSofa()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'BrightSofa',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'Sleep',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Control',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Slip',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Fear',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readBrightSofasConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readBrightSofasConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readBrightSofasEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readBrightSofasEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readBrightSofasEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('BrightSofa'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadBrightSofasSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadBrightSofasSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadBrightSofasSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadBrightSofasSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadBrightSofasSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function BrightSofaUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'BrightSofaUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Slip', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Fear', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sleep', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Control', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'BoundlessDoctorBeadID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function BrightSofaCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'BrightSofaCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Slip', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Fear', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sleep', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Control', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'BoundlessDoctorBeadID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function BrightSofaWithDescendants()
    {
        return new \GraphQL\Type\Definition\UnionType(array(
            'name' => 'BrightSofaWithDescendants',
            'resolveType' => SilverStripe\GraphQL\Resolvers\UnionResolverFactory::create(array())->createClosure($this),
            'types' => SilverStripe\GraphQL\Storage\Encode\UnionTypeFactory::create(array(
                'types' => array(
                    'BrightSofa',
                    'Trade'
                )
            ))->createClosure($this)
        ));
    }

    private function Bulb()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'Bulb',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Drop',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Grip',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Fruit',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Tub',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readBulbsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readBulbsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readBulbsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readBulbsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readBulbsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Bulb'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadBulbsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadBulbsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadBulbsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadBulbsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadBulbsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function BulbUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'BulbUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Drop', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Grip', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Fruit', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Tub', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'AggressiveStretchPigsID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'PointID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function BulbCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'BulbCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Drop', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Grip', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Fruit', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Tub', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'AggressiveStretchPigsID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'PointID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function BulbWithDescendants()
    {
        return new \GraphQL\Type\Definition\UnionType(array(
            'name' => 'BulbWithDescendants',
            'resolveType' => SilverStripe\GraphQL\Resolvers\UnionResolverFactory::create(array())->createClosure($this),
            'types' => SilverStripe\GraphQL\Storage\Encode\UnionTypeFactory::create(array(
                'types' => array(
                    'Bulb',
                    'Cakes'
                )
            ))->createClosure($this)
        ));
    }

    private function BumpyCave()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'BumpyCave',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Cast',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'View',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Airplane',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readBumpyCavesConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readBumpyCavesConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readBumpyCavesEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readBumpyCavesEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readBumpyCavesEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('BumpyCave'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadBumpyCavesSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadBumpyCavesSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadBumpyCavesSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadBumpyCavesSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadBumpyCavesSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function BumpyCaveUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'BumpyCaveUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Cast', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'View', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Airplane', 'type' => GraphQL\Type\Definition\Type::string())
                );
            }
        ));
    }

    private function BumpyCaveCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'BumpyCaveCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Cast', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'View', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Airplane', 'type' => GraphQL\Type\Definition\Type::string())
                );
            }
        ));
    }

    private function Cake()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'Cake',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Religion',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Lock',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Month',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sleep',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Rabbits',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readCakesConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readCakesConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readCakesEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readCakesEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readCakesEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Cake'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadCakesSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadCakesSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadCakesSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadCakesSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadCakesSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function CakeUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'CakeUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Religion', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Lock', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Month', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Sleep', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Rabbits', 'type' => GraphQL\Type\Definition\Type::string())
                );
            }
        ));
    }

    private function CakeCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'CakeCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Religion', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Lock', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Month', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Sleep', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Rabbits', 'type' => GraphQL\Type\Definition\Type::string())
                );
            }
        ));
    }

    private function Cakes()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'Cakes',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'View',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Ice',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Exchange',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Loss',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Observation',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Drop',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Grip',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Fruit',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Tub',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readCakessConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readCakessConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readCakessEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readCakessEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readCakessEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Cakes'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadCakessSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadCakessSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadCakessSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadCakessSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadCakessSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function CakesUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'CakesUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Drop', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Grip', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Fruit', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Tub', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'AggressiveStretchPigsID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'PointID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'View', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Ice', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Exchange', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Loss', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Observation', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CooperativeExistenceNightID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'CuddlyBoardID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function CakesCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'CakesCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Drop', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Grip', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Fruit', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Tub', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'AggressiveStretchPigsID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'PointID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'View', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Ice', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Exchange', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Loss', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Observation', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CooperativeExistenceNightID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'CuddlyBoardID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function CapriciousTitle()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'CapriciousTitle',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Industry',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Swing',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Soap',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readCapriciousTitlesConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readCapriciousTitlesConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readCapriciousTitlesEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readCapriciousTitlesEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readCapriciousTitlesEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('CapriciousTitle'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadCapriciousTitlesSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadCapriciousTitlesSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadCapriciousTitlesSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadCapriciousTitlesSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadCapriciousTitlesSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function CapriciousTitleUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'CapriciousTitleUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Industry', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Swing', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Soap', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'DispensableAftermathID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function CapriciousTitleCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'CapriciousTitleCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Industry', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Swing', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Soap', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'DispensableAftermathID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function CapriciousTitleWithDescendants()
    {
        return new \GraphQL\Type\Definition\UnionType(array(
            'name' => 'CapriciousTitleWithDescendants',
            'resolveType' => SilverStripe\GraphQL\Resolvers\UnionResolverFactory::create(array())->createClosure($this),
            'types' => SilverStripe\GraphQL\Storage\Encode\UnionTypeFactory::create(array(
                'types' => array(
                    'CapriciousTitle',
                    'ReconditeVolleyballMitten',
                    'Support'
                )
            ))->createClosure($this)
        ));
    }

    private function Cars()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'Cars',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Support',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Scarf',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Salt',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Doctor',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readCarssConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readCarssConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readCarssEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readCarssEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readCarssEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Cars'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadCarssSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadCarssSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadCarssSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadCarssSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadCarssSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function CarsUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'CarsUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Support', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Scarf', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Salt', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Doctor', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'RightSignID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function CarsCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'CarsCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Support', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Scarf', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Salt', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Doctor', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'RightSignID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function Cast()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'Cast',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Kitty',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Rabbits',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'AbundantTigers',
                        'type' => $this->getType('AbundantTigersConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => array(
                                'SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver',
                                'resolve'
                            ),
                            'parentResolverFactory' => null,
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'HelpfulAgreements',
                        'type' => $this->getType('HelpfulAgreementsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => array(
                                'SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver',
                                'resolve'
                            ),
                            'parentResolverFactory' => null,
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    )
                );
            }
        ));
    }

    private function readCastsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readCastsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readCastsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readCastsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readCastsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Cast'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadCastsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadCastsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadCastsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadCastsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadCastsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function CastUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'CastUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Kitty', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Rabbits', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LamentableWriterMoveID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function CastCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'CastCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Kitty', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Rabbits', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LamentableWriterMoveID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function AbundantTigersConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'AbundantTigersConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('AbundantTigersEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function AbundantTigersEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'AbundantTigersEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('AbundantTiger'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function AbundantTigersSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'AbundantTigersSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('AbundantTigersSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function AbundantTigersSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'AbundantTigersSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function HelpfulAgreementsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'HelpfulAgreementsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('HelpfulAgreementsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function HelpfulAgreementsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'HelpfulAgreementsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('HelpfulAgreement'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function HelpfulAgreementsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'HelpfulAgreementsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('HelpfulAgreementsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function HelpfulAgreementsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'HelpfulAgreementsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function Cave()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'Cave',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Spot',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Hands',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Basket',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Wine',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readCavesConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readCavesConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readCavesEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readCavesEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readCavesEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Cave'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadCavesSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadCavesSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadCavesSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadCavesSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadCavesSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function CaveUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'CaveUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Spot', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Hands', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Basket', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Wine', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'CommitteeID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'MaterialisticStomachCaveID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'DucksID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'LowClothID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'JoblessRoadID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function CaveCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'CaveCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Spot', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Hands', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Basket', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Wine', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'CommitteeID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'MaterialisticStomachCaveID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'DucksID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'LowClothID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'JoblessRoadID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function CeaselessBoard()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'CeaselessBoard',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Playground',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Fairies',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Place',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readCeaselessBoardsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readCeaselessBoardsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readCeaselessBoardsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readCeaselessBoardsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readCeaselessBoardsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('CeaselessBoard'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadCeaselessBoardsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadCeaselessBoardsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadCeaselessBoardsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadCeaselessBoardsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadCeaselessBoardsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function CeaselessBoardUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'CeaselessBoardUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Playground', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Fairies', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Place', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ThoughtfulNeedCarsID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'ShadeID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'MonthID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function CeaselessBoardCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'CeaselessBoardCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Playground', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Fairies', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Place', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ThoughtfulNeedCarsID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'ShadeID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'MonthID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function CeaselessBoardWithDescendants()
    {
        return new \GraphQL\Type\Definition\UnionType(array(
            'name' => 'CeaselessBoardWithDescendants',
            'resolveType' => SilverStripe\GraphQL\Resolvers\UnionResolverFactory::create(array())->createClosure($this),
            'types' => SilverStripe\GraphQL\Storage\Encode\UnionTypeFactory::create(array(
                'types' => array(
                    'CeaselessBoard',
                    'EtherealPlaceRoad',
                    'Key'
                )
            ))->createClosure($this)
        ));
    }

    private function CeaselessKittens()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'CeaselessKittens',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Agreement',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Pleasure',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readCeaselessKittenssConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readCeaselessKittenssConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readCeaselessKittenssEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readCeaselessKittenssEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readCeaselessKittenssEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('CeaselessKittens'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadCeaselessKittenssSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadCeaselessKittenssSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadCeaselessKittenssSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadCeaselessKittenssSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadCeaselessKittenssSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function CeaselessKittensUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'CeaselessKittensUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Agreement', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Pleasure', 'type' => GraphQL\Type\Definition\Type::string())
                );
            }
        ));
    }

    private function CeaselessKittensCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'CeaselessKittensCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Agreement', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Pleasure', 'type' => GraphQL\Type\Definition\Type::string())
                );
            }
        ));
    }

    private function CeaselessKittensWithDescendants()
    {
        return new \GraphQL\Type\Definition\UnionType(array(
            'name' => 'CeaselessKittensWithDescendants',
            'resolveType' => SilverStripe\GraphQL\Resolvers\UnionResolverFactory::create(array())->createClosure($this),
            'types' => SilverStripe\GraphQL\Storage\Encode\UnionTypeFactory::create(array(
                'types' => array(
                    'CeaselessKittens',
                    'MindlessSmoke'
                )
            ))->createClosure($this)
        ));
    }

    private function Channel()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'Channel',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Scarf',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Thing',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Coat',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Swing',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Airplane',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readChannelsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readChannelsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readChannelsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readChannelsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readChannelsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Channel'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadChannelsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadChannelsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadChannelsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadChannelsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadChannelsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function ChannelUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ChannelUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Scarf', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Thing', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Coat', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Swing', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Airplane', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'YardID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function ChannelCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ChannelCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Scarf', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Thing', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Coat', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Swing', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Airplane', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'YardID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function Chickens()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'Chickens',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Airplane',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Month',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Agreement',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Bells',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Rabbits',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readChickenssConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readChickenssConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readChickenssEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readChickenssEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readChickenssEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Chickens'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadChickenssSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadChickenssSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadChickenssSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadChickenssSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadChickenssSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function ChickensUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ChickensUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Airplane', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Month', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Agreement', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Bells', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Rabbits', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'HelpfulAgreementID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'FarflungChickensLegsID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function ChickensCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ChickensCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Airplane', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Month', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Agreement', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Bells', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Rabbits', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'HelpfulAgreementID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'FarflungChickensLegsID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function Coast()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'Coast',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Cap',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Test',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Smell',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Aftermath',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Cream',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readCoastsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readCoastsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readCoastsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readCoastsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readCoastsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Coast'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadCoastsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadCoastsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadCoastsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadCoastsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadCoastsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function CoastUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'CoastUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Cap', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Test', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Smell', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Aftermath', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Cream', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'WashID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function CoastCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'CoastCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Cap', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Test', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Smell', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Aftermath', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Cream', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'WashID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function CoherentCaveReligion()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'CoherentCaveReligion',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Vest',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Religion',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Start',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readCoherentCaveReligionsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readCoherentCaveReligionsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readCoherentCaveReligionsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readCoherentCaveReligionsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readCoherentCaveReligionsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('CoherentCaveReligion'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadCoherentCaveReligionsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadCoherentCaveReligionsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadCoherentCaveReligionsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadCoherentCaveReligionsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadCoherentCaveReligionsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function CoherentCaveReligionUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'CoherentCaveReligionUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Vest', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Religion', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Start', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LamentableFactWheelID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'HolidayID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'FierceBulbID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function CoherentCaveReligionCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'CoherentCaveReligionCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Vest', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Religion', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Start', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LamentableFactWheelID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'HolidayID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'FierceBulbID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function Committee()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'Committee',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Bead',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Top',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Umbrella',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Night',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'End',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readCommitteesConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readCommitteesConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readCommitteesEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readCommitteesEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readCommitteesEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Committee'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadCommitteesSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadCommitteesSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadCommitteesSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadCommitteesSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadCommitteesSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function CommitteeUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'CommitteeUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Bead', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Top', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Umbrella', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Night', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'End', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'UppityVestID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function CommitteeCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'CommitteeCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Bead', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Top', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Umbrella', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Night', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'End', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'UppityVestID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function CooperativeExistenceNight()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'CooperativeExistenceNight',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Hill',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readCooperativeExistenceNightsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readCooperativeExistenceNightsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readCooperativeExistenceNightsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readCooperativeExistenceNightsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readCooperativeExistenceNightsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('CooperativeExistenceNight'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadCooperativeExistenceNightsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadCooperativeExistenceNightsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadCooperativeExistenceNightsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadCooperativeExistenceNightsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadCooperativeExistenceNightsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function CooperativeExistenceNightUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'CooperativeExistenceNightUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Hill', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CastID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'QuarrelsomeRabbitsID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'CeaselessKittensID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function CooperativeExistenceNightCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'CooperativeExistenceNightCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Hill', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CastID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'QuarrelsomeRabbitsID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'CeaselessKittensID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function CravenStomachAdjustment()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'CravenStomachAdjustment',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Trees',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Liquid',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readCravenStomachAdjustmentsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readCravenStomachAdjustmentsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readCravenStomachAdjustmentsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readCravenStomachAdjustmentsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readCravenStomachAdjustmentsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('CravenStomachAdjustment'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadCravenStomachAdjustmentsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadCravenStomachAdjustmentsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadCravenStomachAdjustmentsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadCravenStomachAdjustmentsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadCravenStomachAdjustmentsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function CravenStomachAdjustmentUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'CravenStomachAdjustmentUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Trees', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Liquid', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'EfficaciousTreesHatID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'TitleRecordID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function CravenStomachAdjustmentCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'CravenStomachAdjustmentCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Trees', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Liquid', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'EfficaciousTreesHatID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'TitleRecordID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function Crib()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'Crib',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Support',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Channel',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Test',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readCribsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readCribsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readCribsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readCribsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readCribsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Crib'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadCribsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadCribsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadCribsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadCribsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadCribsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function CribUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'CribUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Support', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Channel', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Test', 'type' => GraphQL\Type\Definition\Type::int())
                );
            }
        ));
    }

    private function CribCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'CribCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Support', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Channel', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Test', 'type' => GraphQL\Type\Definition\Type::int())
                );
            }
        ));
    }

    private function CuddlyBoard()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'CuddlyBoard',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Train',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readCuddlyBoardsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readCuddlyBoardsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readCuddlyBoardsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readCuddlyBoardsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readCuddlyBoardsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('CuddlyBoard'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadCuddlyBoardsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadCuddlyBoardsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadCuddlyBoardsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadCuddlyBoardsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadCuddlyBoardsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function CuddlyBoardUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'CuddlyBoardUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Train', 'type' => GraphQL\Type\Definition\Type::int())
                );
            }
        ));
    }

    private function CuddlyBoardCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'CuddlyBoardCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Train', 'type' => GraphQL\Type\Definition\Type::int())
                );
            }
        ));
    }

    private function CuriousSparkThread()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'CuriousSparkThread',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Regret',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Station',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Chickens',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Pigs',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ActuallyMittenActivities',
                        'type' => $this->getType('ActuallyMittenActivitiesConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => array(
                                'SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver',
                                'resolve'
                            ),
                            'parentResolverFactory' => null,
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'Popcorns',
                        'type' => $this->getType('PopcornsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => array(
                                'SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver',
                                'resolve'
                            ),
                            'parentResolverFactory' => null,
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    )
                );
            }
        ));
    }

    private function readCuriousSparkThreadsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readCuriousSparkThreadsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readCuriousSparkThreadsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readCuriousSparkThreadsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readCuriousSparkThreadsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('CuriousSparkThread'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadCuriousSparkThreadsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadCuriousSparkThreadsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadCuriousSparkThreadsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadCuriousSparkThreadsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadCuriousSparkThreadsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function CuriousSparkThreadUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'CuriousSparkThreadUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Regret', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Station', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Chickens', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Pigs', 'type' => GraphQL\Type\Definition\Type::boolean())
                );
            }
        ));
    }

    private function CuriousSparkThreadCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'CuriousSparkThreadCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Regret', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Station', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Chickens', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Pigs', 'type' => GraphQL\Type\Definition\Type::boolean())
                );
            }
        ));
    }

    private function CuriousSparkThreadWithDescendants()
    {
        return new \GraphQL\Type\Definition\UnionType(array(
            'name' => 'CuriousSparkThreadWithDescendants',
            'resolveType' => SilverStripe\GraphQL\Resolvers\UnionResolverFactory::create(array())->createClosure($this),
            'types' => SilverStripe\GraphQL\Storage\Encode\UnionTypeFactory::create(array(
                'types' => array(
                    'CuriousSparkThread',
                    'AggressiveStretchPigs'
                )
            ))->createClosure($this)
        ));
    }

    private function CurvedPlace()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'CurvedPlace',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Pleasure',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Bike',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Train',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Pigs',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Current',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'DisturbedShows',
                        'type' => $this->getType('DisturbedShowsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => array(
                                'SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver',
                                'resolve'
                            ),
                            'parentResolverFactory' => null,
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    )
                );
            }
        ));
    }

    private function readCurvedPlacesConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readCurvedPlacesConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readCurvedPlacesEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readCurvedPlacesEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readCurvedPlacesEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('CurvedPlace'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadCurvedPlacesSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadCurvedPlacesSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadCurvedPlacesSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadCurvedPlacesSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadCurvedPlacesSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function CurvedPlaceUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'CurvedPlaceUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Pleasure', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Bike', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Train', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Pigs', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'TightfistedChannelDivisionID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Current', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'GlisteningDropRoomID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'LamentableFactWheelID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'StripedVestQuiverID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function CurvedPlaceCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'CurvedPlaceCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Pleasure', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Bike', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Train', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Pigs', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'TightfistedChannelDivisionID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Current', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'GlisteningDropRoomID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'LamentableFactWheelID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'StripedVestQuiverID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function DisturbedShowsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'DisturbedShowsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('DisturbedShowsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function DisturbedShowsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'DisturbedShowsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('DisturbedShow'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function DisturbedShowsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'DisturbedShowsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('DisturbedShowsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function DisturbedShowsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'DisturbedShowsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function CurvedSheepNeed()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'CurvedSheepNeed',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'TitleRecord',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Wash',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Key',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Women',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readCurvedSheepNeedsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readCurvedSheepNeedsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readCurvedSheepNeedsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readCurvedSheepNeedsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readCurvedSheepNeedsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('CurvedSheepNeed'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadCurvedSheepNeedsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadCurvedSheepNeedsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadCurvedSheepNeedsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadCurvedSheepNeedsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadCurvedSheepNeedsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function CurvedSheepNeedUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'CurvedSheepNeedUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'TitleRecord', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Wash', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Key', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Women', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'CuddlyBoardID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function CurvedSheepNeedCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'CurvedSheepNeedCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'TitleRecord', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Wash', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Key', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Women', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'CuddlyBoardID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function CurvedWashTop()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'CurvedWashTop',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Straw',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Key',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Ice',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readCurvedWashTopsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readCurvedWashTopsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readCurvedWashTopsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readCurvedWashTopsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readCurvedWashTopsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('CurvedWashTop'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadCurvedWashTopsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadCurvedWashTopsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadCurvedWashTopsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadCurvedWashTopsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadCurvedWashTopsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function CurvedWashTopUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'CurvedWashTopUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Straw', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Key', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Ice', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'BabyID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function CurvedWashTopCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'CurvedWashTopCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Straw', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Key', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Ice', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'BabyID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function Cushion()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'Cushion',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Profit',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Pleasure',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sock',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Need',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Rake',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readCushionsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readCushionsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readCushionsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readCushionsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readCushionsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Cushion'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadCushionsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadCushionsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadCushionsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadCushionsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadCushionsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function CushionUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'CushionUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Profit', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'JitteryUmbrellaID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Pleasure', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Sock', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Need', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Rake', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'RightSignID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'TitleRecordID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'WhitePleasureObservationID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function CushionCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'CushionCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Profit', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'JitteryUmbrellaID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Pleasure', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Sock', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Need', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Rake', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'RightSignID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'TitleRecordID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'WhitePleasureObservationID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function CutEffectBoard()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'CutEffectBoard',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sea',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Bulb',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readCutEffectBoardsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readCutEffectBoardsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readCutEffectBoardsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readCutEffectBoardsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readCutEffectBoardsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('CutEffectBoard'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadCutEffectBoardsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadCutEffectBoardsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadCutEffectBoardsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadCutEffectBoardsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadCutEffectBoardsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function CutEffectBoardUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'CutEffectBoardUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Sea', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Bulb', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'CoherentCaveReligionID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'PanickyChickensID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'ShockingFearID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'RoomID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function CutEffectBoardCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'CutEffectBoardCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Sea', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Bulb', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'CoherentCaveReligionID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'PanickyChickensID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'ShockingFearID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'RoomID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function CutShade()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'CutShade',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Door',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Advertisement',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Fruit',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Feeling',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Attack',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Advertisements',
                        'type' => $this->getType('AdvertisementsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => array(
                                'SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver',
                                'resolve'
                            ),
                            'parentResolverFactory' => null,
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'ReadyBirdsKeys',
                        'type' => $this->getType('ReadyBirdsKeysConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => array(
                                'SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver',
                                'resolve'
                            ),
                            'parentResolverFactory' => null,
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'AheadFriends',
                        'type' => $this->getType('AheadFriendsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => array(
                                'SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver',
                                'resolve'
                            ),
                            'parentResolverFactory' => null,
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'Yards',
                        'type' => $this->getType('YardsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => array(
                                'SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver',
                                'resolve'
                            ),
                            'parentResolverFactory' => null,
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    )
                );
            }
        ));
    }

    private function readCutShadesConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readCutShadesConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readCutShadesEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readCutShadesEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readCutShadesEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('CutShade'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadCutShadesSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadCutShadesSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadCutShadesSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadCutShadesSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadCutShadesSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function CutShadeUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'CutShadeUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Door', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Advertisement', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Fruit', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Feeling', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Attack', 'type' => GraphQL\Type\Definition\Type::int())
                );
            }
        ));
    }

    private function CutShadeCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'CutShadeCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Door', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Advertisement', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Fruit', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Feeling', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Attack', 'type' => GraphQL\Type\Definition\Type::int())
                );
            }
        ));
    }

    private function AdvertisementsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'AdvertisementsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('AdvertisementsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function AdvertisementsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'AdvertisementsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Advertisement'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function AdvertisementsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'AdvertisementsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('AdvertisementsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function AdvertisementsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'AdvertisementsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function ReadyBirdsKeysConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'ReadyBirdsKeysConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('ReadyBirdsKeysEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadyBirdsKeysEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'ReadyBirdsKeysEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('ReadyBirdsKey'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadyBirdsKeysSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadyBirdsKeysSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadyBirdsKeysSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadyBirdsKeysSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadyBirdsKeysSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function AheadFriendsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'AheadFriendsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('AheadFriendsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function AheadFriendsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'AheadFriendsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('AheadFriend'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function AheadFriendsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'AheadFriendsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('AheadFriendsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function AheadFriendsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'AheadFriendsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function YardsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'YardsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('YardsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function YardsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'YardsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Yard'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function YardsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'YardsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('YardsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function YardsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'YardsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function Dinosaurs()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'Dinosaurs',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Cap',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Wheel',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readDinosaurssConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readDinosaurssConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readDinosaurssEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readDinosaurssEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readDinosaurssEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Dinosaurs'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadDinosaurssSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadDinosaurssSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadDinosaurssSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadDinosaurssSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadDinosaurssSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function DinosaursUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'DinosaursUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Cap', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Wheel', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CurvedPlaceID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'ThoughtfulNeedCarsID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function DinosaursCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'DinosaursCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Cap', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Wheel', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CurvedPlaceID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'ThoughtfulNeedCarsID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function DisagreeableBeef()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'DisagreeableBeef',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Vest',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Airplane',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Stretch',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Door',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Playground',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readDisagreeableBeefsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readDisagreeableBeefsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readDisagreeableBeefsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readDisagreeableBeefsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readDisagreeableBeefsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('DisagreeableBeef'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadDisagreeableBeefsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadDisagreeableBeefsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadDisagreeableBeefsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadDisagreeableBeefsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadDisagreeableBeefsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function DisagreeableBeefUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'DisagreeableBeefUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Vest', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Airplane', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Stretch', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Door', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Playground', 'type' => GraphQL\Type\Definition\Type::string())
                );
            }
        ));
    }

    private function DisagreeableBeefCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'DisagreeableBeefCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Vest', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Airplane', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Stretch', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Door', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Playground', 'type' => GraphQL\Type\Definition\Type::string())
                );
            }
        ));
    }

    private function DispensableAftermath()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'DispensableAftermath',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Hate',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CapriciousTitles',
                        'type' => $this->getType('CapriciousTitlesConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => array(
                                'SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver',
                                'resolve'
                            ),
                            'parentResolverFactory' => null,
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'WindyJudges',
                        'type' => $this->getType('WindyJudgesConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => array(
                                'SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver',
                                'resolve'
                            ),
                            'parentResolverFactory' => null,
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    )
                );
            }
        ));
    }

    private function readDispensableAftermathsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readDispensableAftermathsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readDispensableAftermathsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readDispensableAftermathsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readDispensableAftermathsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('DispensableAftermath'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadDispensableAftermathsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadDispensableAftermathsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadDispensableAftermathsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadDispensableAftermathsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadDispensableAftermathsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function DispensableAftermathUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'DispensableAftermathUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Hate', 'type' => GraphQL\Type\Definition\Type::boolean())
                );
            }
        ));
    }

    private function DispensableAftermathCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'DispensableAftermathCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Hate', 'type' => GraphQL\Type\Definition\Type::boolean())
                );
            }
        ));
    }

    private function CapriciousTitlesConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'CapriciousTitlesConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('CapriciousTitlesEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function CapriciousTitlesEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'CapriciousTitlesEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('CapriciousTitle'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function CapriciousTitlesSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'CapriciousTitlesSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('CapriciousTitlesSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function CapriciousTitlesSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'CapriciousTitlesSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function WindyJudgesConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'WindyJudgesConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('WindyJudgesEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function WindyJudgesEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'WindyJudgesEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('WindyJudge'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function WindyJudgesSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'WindyJudgesSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('WindyJudgesSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function WindyJudgesSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'WindyJudgesSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function DisturbedShow()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'DisturbedShow',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'Test',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Hands',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Tendency',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Wine',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Wash',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Grade',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Tub',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readDisturbedShowsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readDisturbedShowsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readDisturbedShowsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readDisturbedShowsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readDisturbedShowsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('DisturbedShow'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadDisturbedShowsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadDisturbedShowsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadDisturbedShowsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadDisturbedShowsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadDisturbedShowsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function DisturbedShowUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'DisturbedShowUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Wash', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'MightyTrainDoorID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'AlikeSwingID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Grade', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Tub', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'CaveID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Test', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Hands', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Tendency', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Wine', 'type' => GraphQL\Type\Definition\Type::boolean())
                );
            }
        ));
    }

    private function DisturbedShowCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'DisturbedShowCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Wash', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'MightyTrainDoorID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'AlikeSwingID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Grade', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Tub', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'CaveID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Test', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Hands', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Tendency', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Wine', 'type' => GraphQL\Type\Definition\Type::boolean())
                );
            }
        ));
    }

    private function Doctor()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'Doctor',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'End',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Tub',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Lock',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readDoctorsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readDoctorsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readDoctorsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readDoctorsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readDoctorsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Doctor'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadDoctorsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadDoctorsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadDoctorsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadDoctorsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadDoctorsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function DoctorUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'DoctorUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'End', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Tub', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Lock', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'AgreementID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function DoctorCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'DoctorCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'End', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Tub', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Lock', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'AgreementID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function Drop()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'Drop',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Mitten',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ThoughtlessObservations',
                        'type' => $this->getType('ThoughtlessObservationsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => array(
                                'SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver',
                                'resolve'
                            ),
                            'parentResolverFactory' => null,
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'IndustriousGrandmotherUmbrellas',
                        'type' => $this->getType('IndustriousGrandmotherUmbrellasConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => array(
                                'SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver',
                                'resolve'
                            ),
                            'parentResolverFactory' => null,
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    )
                );
            }
        ));
    }

    private function readDropsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readDropsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readDropsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readDropsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readDropsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Drop'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadDropsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadDropsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadDropsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadDropsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadDropsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function DropUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'DropUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Mitten', 'type' => GraphQL\Type\Definition\Type::int())
                );
            }
        ));
    }

    private function DropCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'DropCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Mitten', 'type' => GraphQL\Type\Definition\Type::int())
                );
            }
        ));
    }

    private function ThoughtlessObservationsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'ThoughtlessObservationsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('ThoughtlessObservationsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ThoughtlessObservationsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'ThoughtlessObservationsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('ThoughtlessObservation'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ThoughtlessObservationsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ThoughtlessObservationsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ThoughtlessObservationsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ThoughtlessObservationsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ThoughtlessObservationsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function IndustriousGrandmotherUmbrellasConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'IndustriousGrandmotherUmbrellasConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('IndustriousGrandmotherUmbrellasEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function IndustriousGrandmotherUmbrellasEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'IndustriousGrandmotherUmbrellasEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('IndustriousGrandmotherUmbrella'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function IndustriousGrandmotherUmbrellasSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'IndustriousGrandmotherUmbrellasSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('IndustriousGrandmotherUmbrellasSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function IndustriousGrandmotherUmbrellasSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'IndustriousGrandmotherUmbrellasSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function Ducks()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'Ducks',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Tub',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Pull',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readDuckssConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readDuckssConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readDuckssEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readDuckssEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readDuckssEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Ducks'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadDuckssSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadDuckssSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadDuckssSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadDuckssSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadDuckssSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function DucksUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'DucksUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Tub', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Pull', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ReconditeYardID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function DucksCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'DucksCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Tub', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Pull', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ReconditeYardID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function DustyGhostNight()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'DustyGhostNight',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Ghost',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Bells',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Cakes',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Writer',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Lock',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readDustyGhostNightsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readDustyGhostNightsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readDustyGhostNightsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readDustyGhostNightsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readDustyGhostNightsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('DustyGhostNight'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadDustyGhostNightsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadDustyGhostNightsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadDustyGhostNightsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadDustyGhostNightsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadDustyGhostNightsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function DustyGhostNightUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'DustyGhostNightUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Ghost', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Bells', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Cakes', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Writer', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Lock', 'type' => GraphQL\Type\Definition\Type::boolean())
                );
            }
        ));
    }

    private function DustyGhostNightCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'DustyGhostNightCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Ghost', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Bells', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Cakes', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Writer', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Lock', 'type' => GraphQL\Type\Definition\Type::boolean())
                );
            }
        ));
    }

    private function EagerHill()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'EagerHill',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Advertisement',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Health',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Liquid',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Key',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readEagerHillsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readEagerHillsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readEagerHillsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readEagerHillsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readEagerHillsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('EagerHill'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadEagerHillsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadEagerHillsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadEagerHillsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadEagerHillsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadEagerHillsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function EagerHillUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'EagerHillUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Advertisement', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Health', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Liquid', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Key', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'SmellySmokeCastID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function EagerHillCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'EagerHillCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Advertisement', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Health', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Liquid', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Key', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'SmellySmokeCastID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function EfficaciousTreesHat()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'EfficaciousTreesHat',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Jail',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readEfficaciousTreesHatsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readEfficaciousTreesHatsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readEfficaciousTreesHatsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readEfficaciousTreesHatsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readEfficaciousTreesHatsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('EfficaciousTreesHat'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadEfficaciousTreesHatsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadEfficaciousTreesHatsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadEfficaciousTreesHatsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadEfficaciousTreesHatsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadEfficaciousTreesHatsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function EfficaciousTreesHatUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'EfficaciousTreesHatUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Jail', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function EfficaciousTreesHatCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'EfficaciousTreesHatCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Jail', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function EliteCrib()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'EliteCrib',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Veil',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readEliteCribsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readEliteCribsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readEliteCribsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readEliteCribsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readEliteCribsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('EliteCrib'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadEliteCribsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadEliteCribsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadEliteCribsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadEliteCribsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadEliteCribsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function EliteCribUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'EliteCribUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Veil', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'WhiteExchangeID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'GripID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'WoodenBulbID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function EliteCribCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'EliteCribCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Veil', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'WhiteExchangeID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'GripID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'WoodenBulbID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function EliteKittensNight()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'EliteKittensNight',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Chickens',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Yard',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Ice',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Wheel',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Angles',
                        'type' => $this->getType('AnglesConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => array(
                                'SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver',
                                'resolve'
                            ),
                            'parentResolverFactory' => null,
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'SpicyCoasts',
                        'type' => $this->getType('SpicyCoastsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => array(
                                'SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver',
                                'resolve'
                            ),
                            'parentResolverFactory' => null,
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'Channels',
                        'type' => $this->getType('ChannelsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => array(
                                'SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver',
                                'resolve'
                            ),
                            'parentResolverFactory' => null,
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'AheadFriends',
                        'type' => $this->getType('AheadFriendsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => array(
                                'SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver',
                                'resolve'
                            ),
                            'parentResolverFactory' => null,
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    )
                );
            }
        ));
    }

    private function readEliteKittensNightsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readEliteKittensNightsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readEliteKittensNightsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readEliteKittensNightsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readEliteKittensNightsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('EliteKittensNight'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadEliteKittensNightsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadEliteKittensNightsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadEliteKittensNightsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadEliteKittensNightsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadEliteKittensNightsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function EliteKittensNightUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'EliteKittensNightUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Chickens', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'CurvedSheepNeedID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'HorribleSuitID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'AheadFriendID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Yard', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Ice', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Wheel', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ReligionID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'TradeID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function EliteKittensNightCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'EliteKittensNightCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Chickens', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'CurvedSheepNeedID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'HorribleSuitID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'AheadFriendID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Yard', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Ice', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Wheel', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ReligionID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'TradeID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function AnglesConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'AnglesConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('AnglesEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function AnglesEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'AnglesEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Angle'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function AnglesSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'AnglesSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('AnglesSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function AnglesSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'AnglesSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function SpicyCoastsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'SpicyCoastsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('SpicyCoastsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function SpicyCoastsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'SpicyCoastsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('SpicyCoast'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function SpicyCoastsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'SpicyCoastsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('SpicyCoastsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function SpicyCoastsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'SpicyCoastsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function ErectAftermathJudge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'ErectAftermathJudge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Bike',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Swing',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Station',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readErectAftermathJudgesConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readErectAftermathJudgesConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readErectAftermathJudgesEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readErectAftermathJudgesEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readErectAftermathJudgesEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('ErectAftermathJudge'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadErectAftermathJudgesSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadErectAftermathJudgesSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadErectAftermathJudgesSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadErectAftermathJudgesSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadErectAftermathJudgesSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function ErectAftermathJudgeUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ErectAftermathJudgeUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Bike', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Swing', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Station', 'type' => GraphQL\Type\Definition\Type::string())
                );
            }
        ));
    }

    private function ErectAftermathJudgeCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ErectAftermathJudgeCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Bike', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Swing', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Station', 'type' => GraphQL\Type\Definition\Type::string())
                );
            }
        ));
    }

    private function ErectWheelAftermath()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'ErectWheelAftermath',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Coast',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Cake',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Coat',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readErectWheelAftermathsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readErectWheelAftermathsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readErectWheelAftermathsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readErectWheelAftermathsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readErectWheelAftermathsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('ErectWheelAftermath'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadErectWheelAftermathsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadErectWheelAftermathsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadErectWheelAftermathsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadErectWheelAftermathsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadErectWheelAftermathsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function ErectWheelAftermathUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ErectWheelAftermathUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Coast', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Cake', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Coat', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'FierceGrandmotherThreadID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'RightSignID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'HistoricalSlipID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function ErectWheelAftermathCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ErectWheelAftermathCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Coast', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Cake', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Coat', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'FierceGrandmotherThreadID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'RightSignID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'HistoricalSlipID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function EtherealLossSpark()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'EtherealLossSpark',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Airplane',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Tiger',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sofa',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Ice',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readEtherealLossSparksConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readEtherealLossSparksConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readEtherealLossSparksEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readEtherealLossSparksEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readEtherealLossSparksEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('EtherealLossSpark'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadEtherealLossSparksSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadEtherealLossSparksSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadEtherealLossSparksSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadEtherealLossSparksSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadEtherealLossSparksSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function EtherealLossSparkUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'EtherealLossSparkUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Airplane', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Tiger', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Sofa', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Ice', 'type' => GraphQL\Type\Definition\Type::string())
                );
            }
        ));
    }

    private function EtherealLossSparkCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'EtherealLossSparkCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Airplane', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Tiger', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Sofa', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Ice', 'type' => GraphQL\Type\Definition\Type::string())
                );
            }
        ));
    }

    private function EtherealPlaceRoad()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'EtherealPlaceRoad',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'Mitten',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Cushion',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Playground',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Fairies',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Place',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'FamiliarReligions',
                        'type' => $this->getType('FamiliarReligionsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => array(
                                'SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver',
                                'resolve'
                            ),
                            'parentResolverFactory' => null,
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    )
                );
            }
        ));
    }

    private function readEtherealPlaceRoadsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readEtherealPlaceRoadsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readEtherealPlaceRoadsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readEtherealPlaceRoadsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readEtherealPlaceRoadsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('EtherealPlaceRoad'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadEtherealPlaceRoadsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadEtherealPlaceRoadsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadEtherealPlaceRoadsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadEtherealPlaceRoadsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadEtherealPlaceRoadsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function EtherealPlaceRoadUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'EtherealPlaceRoadUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Playground', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Fairies', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Place', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ThoughtfulNeedCarsID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'ShadeID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'MonthID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Mitten', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Cushion', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'HelpfulChannelBirdsID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'MomentousSheepPorterID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'WrongAftermathID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function EtherealPlaceRoadCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'EtherealPlaceRoadCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Playground', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Fairies', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Place', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ThoughtfulNeedCarsID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'ShadeID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'MonthID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Mitten', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Cushion', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'HelpfulChannelBirdsID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'MomentousSheepPorterID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'WrongAftermathID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function FamiliarReligionsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'FamiliarReligionsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('FamiliarReligionsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function FamiliarReligionsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'FamiliarReligionsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('FamiliarReligion'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function FamiliarReligionsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'FamiliarReligionsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('FamiliarReligionsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function FamiliarReligionsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'FamiliarReligionsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function EtherealPlaceRoadWithDescendants()
    {
        return new \GraphQL\Type\Definition\UnionType(array(
            'name' => 'EtherealPlaceRoadWithDescendants',
            'resolveType' => SilverStripe\GraphQL\Resolvers\UnionResolverFactory::create(array())->createClosure($this),
            'types' => SilverStripe\GraphQL\Storage\Encode\UnionTypeFactory::create(array(
                'types' => array(
                    'EtherealPlaceRoad',
                    'Key'
                )
            ))->createClosure($this)
        ));
    }

    private function Fact()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'Fact',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Tiger',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Trouble',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Bridge',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Ice',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readFactsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readFactsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readFactsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readFactsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readFactsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Fact'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadFactsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadFactsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadFactsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadFactsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadFactsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function FactUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'FactUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Tiger', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Trouble', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Bridge', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Ice', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'KeyID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function FactCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'FactCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Tiger', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Trouble', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Bridge', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Ice', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'KeyID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function FamiliarReligion()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'FamiliarReligion',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Thing',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Trade',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Crib',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readFamiliarReligionsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readFamiliarReligionsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readFamiliarReligionsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readFamiliarReligionsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readFamiliarReligionsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('FamiliarReligion'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadFamiliarReligionsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadFamiliarReligionsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadFamiliarReligionsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadFamiliarReligionsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadFamiliarReligionsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function FamiliarReligionUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'FamiliarReligionUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Thing', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Trade', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Crib', 'type' => GraphQL\Type\Definition\Type::boolean())
                );
            }
        ));
    }

    private function FamiliarReligionCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'FamiliarReligionCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Thing', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Trade', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Crib', 'type' => GraphQL\Type\Definition\Type::boolean())
                );
            }
        ));
    }

    private function FarflungChickensLegs()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'FarflungChickensLegs',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Hate',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'View',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Wash',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Reason',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Hydrant',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readFarflungChickensLegssConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readFarflungChickensLegssConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readFarflungChickensLegssEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readFarflungChickensLegssEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readFarflungChickensLegssEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('FarflungChickensLegs'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadFarflungChickensLegssSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadFarflungChickensLegssSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadFarflungChickensLegssSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadFarflungChickensLegssSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadFarflungChickensLegssSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function FarflungChickensLegsUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'FarflungChickensLegsUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Hate', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'View', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Wash', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Reason', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Hydrant', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'AheadFairiesBridgeID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'PigsID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function FarflungChickensLegsCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'FarflungChickensLegsCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Hate', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'View', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Wash', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Reason', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Hydrant', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'AheadFairiesBridgeID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'PigsID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function Feeling()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'Feeling',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Test',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Toy',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Wine',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'View',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ThoughtlessEnds',
                        'type' => $this->getType('ThoughtlessEndsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => array(
                                'SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver',
                                'resolve'
                            ),
                            'parentResolverFactory' => null,
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'Popcorns',
                        'type' => $this->getType('PopcornsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => array(
                                'SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver',
                                'resolve'
                            ),
                            'parentResolverFactory' => null,
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    )
                );
            }
        ));
    }

    private function readFeelingsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readFeelingsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readFeelingsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readFeelingsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readFeelingsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Feeling'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadFeelingsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadFeelingsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadFeelingsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadFeelingsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadFeelingsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function FeelingUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'FeelingUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Test', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Toy', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Wine', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'View', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'CeaselessKittensID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'AdvertisementID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function FeelingCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'FeelingCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Test', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Toy', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Wine', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'View', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'CeaselessKittensID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'AdvertisementID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function ThoughtlessEndsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'ThoughtlessEndsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('ThoughtlessEndsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ThoughtlessEndsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'ThoughtlessEndsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('ThoughtlessEnd'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ThoughtlessEndsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ThoughtlessEndsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ThoughtlessEndsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ThoughtlessEndsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ThoughtlessEndsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function FeelingWithDescendants()
    {
        return new \GraphQL\Type\Definition\UnionType(array(
            'name' => 'FeelingWithDescendants',
            'resolveType' => SilverStripe\GraphQL\Resolvers\UnionResolverFactory::create(array())->createClosure($this),
            'types' => SilverStripe\GraphQL\Storage\Encode\UnionTypeFactory::create(array(
                'types' => array(
                    'Feeling',
                    'Rub'
                )
            ))->createClosure($this)
        ));
    }

    private function FierceBridgeBeef()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'FierceBridgeBeef',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sign',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Mitten',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Stove',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readFierceBridgeBeefsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readFierceBridgeBeefsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readFierceBridgeBeefsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readFierceBridgeBeefsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readFierceBridgeBeefsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('FierceBridgeBeef'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadFierceBridgeBeefsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadFierceBridgeBeefsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadFierceBridgeBeefsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadFierceBridgeBeefsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadFierceBridgeBeefsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function FierceBridgeBeefUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'FierceBridgeBeefUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Sign', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Mitten', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Stove', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CommitteeID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'UnadvisedSupportVeilID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'HelpfulAgreementID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function FierceBridgeBeefCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'FierceBridgeBeefCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Sign', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Mitten', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Stove', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CommitteeID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'UnadvisedSupportVeilID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'HelpfulAgreementID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function FierceBulb()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'FierceBulb',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Pull',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Profit',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Cave',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readFierceBulbsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readFierceBulbsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readFierceBulbsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readFierceBulbsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readFierceBulbsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('FierceBulb'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadFierceBulbsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadFierceBulbsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadFierceBulbsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadFierceBulbsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadFierceBulbsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function FierceBulbUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'FierceBulbUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Pull', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Profit', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Cave', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'AlikeSheepID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'ShadeID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function FierceBulbCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'FierceBulbCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Pull', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Profit', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Cave', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'AlikeSheepID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'ShadeID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function FierceGrandmotherThread()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'FierceGrandmotherThread',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Support',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Wave',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Basket',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ErectAftermathJudges',
                        'type' => $this->getType('ErectAftermathJudgesConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => array(
                                'SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver',
                                'resolve'
                            ),
                            'parentResolverFactory' => null,
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    )
                );
            }
        ));
    }

    private function readFierceGrandmotherThreadsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readFierceGrandmotherThreadsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readFierceGrandmotherThreadsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readFierceGrandmotherThreadsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readFierceGrandmotherThreadsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('FierceGrandmotherThread'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadFierceGrandmotherThreadsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadFierceGrandmotherThreadsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadFierceGrandmotherThreadsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadFierceGrandmotherThreadsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadFierceGrandmotherThreadsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function FierceGrandmotherThreadUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'FierceGrandmotherThreadUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Support', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Wave', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Basket', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'ThoughtfulNeedCarsID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'ProfuseFairiesID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'CoherentCaveReligionID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'GrotesqueJailID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'HorribleSuitID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function FierceGrandmotherThreadCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'FierceGrandmotherThreadCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Support', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Wave', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Basket', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'ThoughtfulNeedCarsID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'ProfuseFairiesID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'CoherentCaveReligionID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'GrotesqueJailID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'HorribleSuitID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function ErectAftermathJudgesConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'ErectAftermathJudgesConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('ErectAftermathJudgesEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ErectAftermathJudgesEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'ErectAftermathJudgesEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('ErectAftermathJudge'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ErectAftermathJudgesSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ErectAftermathJudgesSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ErectAftermathJudgesSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ErectAftermathJudgesSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ErectAftermathJudgesSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function FierceWool()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'FierceWool',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Babies',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Exchange',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Activity',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Tiger',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readFierceWoolsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readFierceWoolsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readFierceWoolsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readFierceWoolsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readFierceWoolsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('FierceWool'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadFierceWoolsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadFierceWoolsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadFierceWoolsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadFierceWoolsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadFierceWoolsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function FierceWoolUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'FierceWoolUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Babies', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Exchange', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Activity', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Tiger', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'UnadvisedWineID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'HelpfulChannelBirdsID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function FierceWoolCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'FierceWoolCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Babies', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Exchange', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Activity', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Tiger', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'UnadvisedWineID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'HelpfulChannelBirdsID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function FineBasket()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'FineBasket',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Shade',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Swing',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Grip',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readFineBasketsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readFineBasketsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readFineBasketsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readFineBasketsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readFineBasketsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('FineBasket'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadFineBasketsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadFineBasketsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadFineBasketsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadFineBasketsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadFineBasketsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function FineBasketUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'FineBasketUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Shade', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Swing', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Grip', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'SpicyCoastID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'ActuallyMittenActivityID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'AbsentLadybugID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'AbrasiveExchangeShadeID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function FineBasketCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'FineBasketCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Shade', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Swing', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Grip', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'SpicyCoastID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'ActuallyMittenActivityID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'AbsentLadybugID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'AbrasiveExchangeShadeID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function FineSleep()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'FineSleep',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Dirt',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Legs',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Porter',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'WindyJudges',
                        'type' => $this->getType('WindyJudgesConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => array(
                                'SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver',
                                'resolve'
                            ),
                            'parentResolverFactory' => null,
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'Bridges',
                        'type' => $this->getType('BridgesConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => array(
                                'SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver',
                                'resolve'
                            ),
                            'parentResolverFactory' => null,
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    )
                );
            }
        ));
    }

    private function readFineSleepsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readFineSleepsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readFineSleepsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readFineSleepsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readFineSleepsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('FineSleep'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadFineSleepsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadFineSleepsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadFineSleepsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadFineSleepsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadFineSleepsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function FineSleepUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'FineSleepUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Dirt', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Legs', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Porter', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'ProfuseFairiesID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'SmellySmokeCastID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function FineSleepCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'FineSleepCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Dirt', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Legs', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Porter', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'ProfuseFairiesID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'SmellySmokeCastID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function BridgesConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'BridgesConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('BridgesEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function BridgesEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'BridgesEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Bridge'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function BridgesSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'BridgesSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('BridgesSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function BridgesSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'BridgesSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function FunctionalDirt()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'FunctionalDirt',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Cellar',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'View',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'War',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Suit',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readFunctionalDirtsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readFunctionalDirtsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readFunctionalDirtsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readFunctionalDirtsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readFunctionalDirtsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('FunctionalDirt'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadFunctionalDirtsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadFunctionalDirtsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadFunctionalDirtsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadFunctionalDirtsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadFunctionalDirtsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function FunctionalDirtUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'FunctionalDirtUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Cellar', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'View', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'War', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Suit', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'CribID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'PigsID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function FunctionalDirtCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'FunctionalDirtCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Cellar', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'View', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'War', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Suit', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'CribID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'PigsID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function GlisteningDropRoom()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'GlisteningDropRoom',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Bead',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Advertisement',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Scarf',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Tendency',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Advertisements',
                        'type' => $this->getType('AdvertisementsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => array(
                                'SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver',
                                'resolve'
                            ),
                            'parentResolverFactory' => null,
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'HeavyDucksChannels',
                        'type' => $this->getType('HeavyDucksChannelsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => array(
                                'SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver',
                                'resolve'
                            ),
                            'parentResolverFactory' => null,
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'CurvedPlaces',
                        'type' => $this->getType('CurvedPlacesConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => array(
                                'SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver',
                                'resolve'
                            ),
                            'parentResolverFactory' => null,
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    )
                );
            }
        ));
    }

    private function readGlisteningDropRoomsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readGlisteningDropRoomsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readGlisteningDropRoomsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readGlisteningDropRoomsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readGlisteningDropRoomsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('GlisteningDropRoom'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadGlisteningDropRoomsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadGlisteningDropRoomsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadGlisteningDropRoomsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadGlisteningDropRoomsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadGlisteningDropRoomsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function GlisteningDropRoomUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'GlisteningDropRoomUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Bead', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Advertisement', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Scarf', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Tendency', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HobbiesID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'LeftSuitID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function GlisteningDropRoomCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'GlisteningDropRoomCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Bead', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Advertisement', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Scarf', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Tendency', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HobbiesID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'LeftSuitID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function HeavyDucksChannelsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'HeavyDucksChannelsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('HeavyDucksChannelsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function HeavyDucksChannelsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'HeavyDucksChannelsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('HeavyDucksChannel'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function HeavyDucksChannelsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'HeavyDucksChannelsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('HeavyDucksChannelsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function HeavyDucksChannelsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'HeavyDucksChannelsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function CurvedPlacesConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'CurvedPlacesConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('CurvedPlacesEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function CurvedPlacesEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'CurvedPlacesEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('CurvedPlace'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function CurvedPlacesSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'CurvedPlacesSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('CurvedPlacesSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function CurvedPlacesSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'CurvedPlacesSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function Grip()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'Grip',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Cellar',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Pigs',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Coat',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readGripsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readGripsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readGripsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readGripsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readGripsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Grip'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadGripsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadGripsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadGripsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadGripsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadGripsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function GripUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'GripUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Cellar', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Pigs', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Coat', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'ShowID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function GripCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'GripCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Cellar', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Pigs', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Coat', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'ShowID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function GrotesqueJail()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'GrotesqueJail',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Cakes',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Property',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Fruit',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Cake',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readGrotesqueJailsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readGrotesqueJailsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readGrotesqueJailsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readGrotesqueJailsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readGrotesqueJailsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('GrotesqueJail'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadGrotesqueJailsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadGrotesqueJailsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadGrotesqueJailsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadGrotesqueJailsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadGrotesqueJailsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function GrotesqueJailUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'GrotesqueJailUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Cakes', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Property', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Fruit', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Cake', 'type' => GraphQL\Type\Definition\Type::string())
                );
            }
        ));
    }

    private function GrotesqueJailCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'GrotesqueJailCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Cakes', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Property', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Fruit', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Cake', 'type' => GraphQL\Type\Definition\Type::string())
                );
            }
        ));
    }

    private function Haircut()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'Haircut',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sheep',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Cloth',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Lock',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Scarf',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readHaircutsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readHaircutsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readHaircutsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readHaircutsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readHaircutsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Haircut'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadHaircutsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadHaircutsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadHaircutsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadHaircutsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadHaircutsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function HaircutUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'HaircutUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Sheep', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'FeelingID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'WoodenTheoryScarfID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'MeltedStoveSparkID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Cloth', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Lock', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Scarf', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CuriousSparkThreadID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'UnadvisedWineID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'SqueamishPopcornPlaygroundID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function HaircutCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'HaircutCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Sheep', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'FeelingID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'WoodenTheoryScarfID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'MeltedStoveSparkID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Cloth', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Lock', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Scarf', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CuriousSparkThreadID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'UnadvisedWineID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'SqueamishPopcornPlaygroundID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function HappyAirplaneSwing()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'HappyAirplaneSwing',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Straw',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Teeth',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readHappyAirplaneSwingsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readHappyAirplaneSwingsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readHappyAirplaneSwingsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readHappyAirplaneSwingsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readHappyAirplaneSwingsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('HappyAirplaneSwing'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadHappyAirplaneSwingsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadHappyAirplaneSwingsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadHappyAirplaneSwingsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadHappyAirplaneSwingsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadHappyAirplaneSwingsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function HappyAirplaneSwingUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'HappyAirplaneSwingUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Straw', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Teeth', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'AlikeSheepID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function HappyAirplaneSwingCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'HappyAirplaneSwingCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Straw', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Teeth', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'AlikeSheepID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function HappyMoveReason()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'HappyMoveReason',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Lock',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Suit',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'PumpedAdjustments',
                        'type' => $this->getType('PumpedAdjustmentsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => array(
                                'SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver',
                                'resolve'
                            ),
                            'parentResolverFactory' => null,
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'LeftTrains',
                        'type' => $this->getType('LeftTrainsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => array(
                                'SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver',
                                'resolve'
                            ),
                            'parentResolverFactory' => null,
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    )
                );
            }
        ));
    }

    private function readHappyMoveReasonsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readHappyMoveReasonsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readHappyMoveReasonsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readHappyMoveReasonsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readHappyMoveReasonsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('HappyMoveReason'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadHappyMoveReasonsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadHappyMoveReasonsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadHappyMoveReasonsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadHappyMoveReasonsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadHappyMoveReasonsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function HappyMoveReasonUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'HappyMoveReasonUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Lock', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Suit', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LowClothID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'AgreementID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function HappyMoveReasonCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'HappyMoveReasonCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Lock', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Suit', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LowClothID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'AgreementID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function PumpedAdjustmentsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'PumpedAdjustmentsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('PumpedAdjustmentsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function PumpedAdjustmentsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'PumpedAdjustmentsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('PumpedAdjustment'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function PumpedAdjustmentsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'PumpedAdjustmentsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PumpedAdjustmentsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function PumpedAdjustmentsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'PumpedAdjustmentsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function LeftTrainsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'LeftTrainsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('LeftTrainsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function LeftTrainsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'LeftTrainsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('LeftTrain'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function LeftTrainsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'LeftTrainsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('LeftTrainsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function LeftTrainsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'LeftTrainsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function HeavyDucksChannel()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'HeavyDucksChannel',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Ladybug',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Start',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Holiday',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readHeavyDucksChannelsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readHeavyDucksChannelsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readHeavyDucksChannelsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readHeavyDucksChannelsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readHeavyDucksChannelsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('HeavyDucksChannel'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadHeavyDucksChannelsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadHeavyDucksChannelsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadHeavyDucksChannelsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadHeavyDucksChannelsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadHeavyDucksChannelsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function HeavyDucksChannelUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'HeavyDucksChannelUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Ladybug', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Start', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Holiday', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'RoomID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'PopcornID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'GlisteningDropRoomID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function HeavyDucksChannelCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'HeavyDucksChannelCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Ladybug', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Start', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Holiday', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'RoomID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'PopcornID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'GlisteningDropRoomID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function HelpfulAgreement()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'HelpfulAgreement',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sea',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Spot',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Rabbits',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Coal',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readHelpfulAgreementsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readHelpfulAgreementsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readHelpfulAgreementsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readHelpfulAgreementsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readHelpfulAgreementsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('HelpfulAgreement'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadHelpfulAgreementsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadHelpfulAgreementsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadHelpfulAgreementsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadHelpfulAgreementsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadHelpfulAgreementsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function HelpfulAgreementUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'HelpfulAgreementUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Sea', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Spot', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Rabbits', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Coal', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'CastID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'CoherentCaveReligionID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'HaircutID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'FierceBridgeBeefID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function HelpfulAgreementCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'HelpfulAgreementCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Sea', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Spot', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Rabbits', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Coal', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'CastID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'CoherentCaveReligionID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'HaircutID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'FierceBridgeBeefID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function HelpfulChannelBirds()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'HelpfulChannelBirds',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Slip',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Fear',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readHelpfulChannelBirdssConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readHelpfulChannelBirdssConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readHelpfulChannelBirdssEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readHelpfulChannelBirdssEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readHelpfulChannelBirdssEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('HelpfulChannelBirds'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadHelpfulChannelBirdssSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadHelpfulChannelBirdssSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadHelpfulChannelBirdssSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadHelpfulChannelBirdssSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadHelpfulChannelBirdssSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function HelpfulChannelBirdsUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'HelpfulChannelBirdsUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Slip', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Fear', 'type' => GraphQL\Type\Definition\Type::boolean())
                );
            }
        ));
    }

    private function HelpfulChannelBirdsCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'HelpfulChannelBirdsCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Slip', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Fear', 'type' => GraphQL\Type\Definition\Type::boolean())
                );
            }
        ));
    }

    private function HelpfulChannelBirdsWithDescendants()
    {
        return new \GraphQL\Type\Definition\UnionType(array(
            'name' => 'HelpfulChannelBirdsWithDescendants',
            'resolveType' => SilverStripe\GraphQL\Resolvers\UnionResolverFactory::create(array())->createClosure($this),
            'types' => SilverStripe\GraphQL\Storage\Encode\UnionTypeFactory::create(array(
                'types' => array(
                    'HelpfulChannelBirds',
                    'BrightSofa',
                    'Trade'
                )
            ))->createClosure($this)
        ));
    }

    private function HighpitchedCommitteeYard()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'HighpitchedCommitteeYard',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Theory',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Observation',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Teeth',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Badges',
                        'type' => $this->getType('BadgesConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => array(
                                'SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver',
                                'resolve'
                            ),
                            'parentResolverFactory' => null,
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'SmellySmokeCasts',
                        'type' => $this->getType('SmellySmokeCastsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => array(
                                'SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver',
                                'resolve'
                            ),
                            'parentResolverFactory' => null,
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'Titles',
                        'type' => $this->getType('TitlesConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => array(
                                'SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver',
                                'resolve'
                            ),
                            'parentResolverFactory' => null,
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    )
                );
            }
        ));
    }

    private function readHighpitchedCommitteeYardsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readHighpitchedCommitteeYardsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readHighpitchedCommitteeYardsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readHighpitchedCommitteeYardsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readHighpitchedCommitteeYardsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('HighpitchedCommitteeYard'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadHighpitchedCommitteeYardsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadHighpitchedCommitteeYardsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadHighpitchedCommitteeYardsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadHighpitchedCommitteeYardsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadHighpitchedCommitteeYardsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function HighpitchedCommitteeYardUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'HighpitchedCommitteeYardUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Theory', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Observation', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Teeth', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'BumpyCaveID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'CravenStomachAdjustmentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'FierceGrandmotherThreadID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'TastyBadgeID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function HighpitchedCommitteeYardCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'HighpitchedCommitteeYardCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Theory', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Observation', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Teeth', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'BumpyCaveID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'CravenStomachAdjustmentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'FierceGrandmotherThreadID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'TastyBadgeID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function BadgesConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'BadgesConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('BadgesEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function BadgesEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'BadgesEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Badge'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function BadgesSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'BadgesSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('BadgesSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function BadgesSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'BadgesSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function SmellySmokeCastsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'SmellySmokeCastsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('SmellySmokeCastsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function SmellySmokeCastsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'SmellySmokeCastsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('SmellySmokeCast'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function SmellySmokeCastsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'SmellySmokeCastsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('SmellySmokeCastsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function SmellySmokeCastsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'SmellySmokeCastsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function TitlesConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'TitlesConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('TitlesEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function TitlesEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'TitlesEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('TitleRecord'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function TitlesSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'TitlesSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('TitlesSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function TitlesSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'TitlesSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function HighpitchedRegretCake()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'HighpitchedRegretCake',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Chickens',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readHighpitchedRegretCakesConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readHighpitchedRegretCakesConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readHighpitchedRegretCakesEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readHighpitchedRegretCakesEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readHighpitchedRegretCakesEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('HighpitchedRegretCake'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadHighpitchedRegretCakesSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadHighpitchedRegretCakesSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadHighpitchedRegretCakesSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadHighpitchedRegretCakesSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadHighpitchedRegretCakesSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function HighpitchedRegretCakeUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'HighpitchedRegretCakeUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Chickens', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ThoughtlessObservationID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'UppityVestID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function HighpitchedRegretCakeCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'HighpitchedRegretCakeCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Chickens', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ThoughtlessObservationID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'UppityVestID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function HistoricalSlip()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'HistoricalSlip',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Key',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Tendency',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Troubles',
                        'type' => $this->getType('TroublesConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => array(
                                'SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver',
                                'resolve'
                            ),
                            'parentResolverFactory' => null,
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'Channels',
                        'type' => $this->getType('ChannelsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => array(
                                'SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver',
                                'resolve'
                            ),
                            'parentResolverFactory' => null,
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    )
                );
            }
        ));
    }

    private function readHistoricalSlipsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readHistoricalSlipsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readHistoricalSlipsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readHistoricalSlipsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readHistoricalSlipsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('HistoricalSlip'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadHistoricalSlipsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadHistoricalSlipsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadHistoricalSlipsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadHistoricalSlipsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadHistoricalSlipsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function HistoricalSlipUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'HistoricalSlipUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Key', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Tendency', 'type' => GraphQL\Type\Definition\Type::int())
                );
            }
        ));
    }

    private function HistoricalSlipCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'HistoricalSlipCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Key', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Tendency', 'type' => GraphQL\Type\Definition\Type::int())
                );
            }
        ));
    }

    private function TroublesConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'TroublesConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('TroublesEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function TroublesEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'TroublesEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Trouble'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function TroublesSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'TroublesSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('TroublesSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function TroublesSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'TroublesSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function HistoricalYard()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'HistoricalYard',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Aftermath',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readHistoricalYardsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readHistoricalYardsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readHistoricalYardsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readHistoricalYardsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readHistoricalYardsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('HistoricalYard'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadHistoricalYardsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadHistoricalYardsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadHistoricalYardsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadHistoricalYardsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadHistoricalYardsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function HistoricalYardUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'HistoricalYardUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Aftermath', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'HelpfulChannelBirdsID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'EliteKittensNightID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'RoomID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function HistoricalYardCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'HistoricalYardCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Aftermath', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'HelpfulChannelBirdsID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'EliteKittensNightID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'RoomID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function Hobbies()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'Hobbies',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Suit',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Doctor',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Story',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Smoke',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Women',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readHobbiessConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readHobbiessConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readHobbiessEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readHobbiessEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readHobbiessEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Hobbies'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadHobbiessSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadHobbiessSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadHobbiessSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadHobbiessSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadHobbiessSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function HobbiesUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'HobbiesUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Suit', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Doctor', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Story', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Smoke', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Women', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CommitteeID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'EliteCribID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'SoapID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function HobbiesCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'HobbiesCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Suit', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Doctor', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Story', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Smoke', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Women', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CommitteeID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'EliteCribID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'SoapID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function Holiday()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'Holiday',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Ladybug',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Soap',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readHolidaysConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readHolidaysConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readHolidaysEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readHolidaysEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readHolidaysEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Holiday'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadHolidaysSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadHolidaysSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadHolidaysSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadHolidaysSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadHolidaysSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function HolidayUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'HolidayUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Ladybug', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Soap', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'SpotID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function HolidayCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'HolidayCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Ladybug', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Soap', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'SpotID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function HolisticSmell()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'HolisticSmell',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Temper',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Jail',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readHolisticSmellsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readHolisticSmellsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readHolisticSmellsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readHolisticSmellsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readHolisticSmellsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('HolisticSmell'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadHolisticSmellsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadHolisticSmellsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadHolisticSmellsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadHolisticSmellsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadHolisticSmellsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function HolisticSmellUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'HolisticSmellUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Temper', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Jail', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'KeyID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'KittensID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'MindlessSmokeID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function HolisticSmellCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'HolisticSmellCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Temper', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Jail', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'KeyID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'KittensID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'MindlessSmokeID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function HorribleSuit()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'HorribleSuit',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Feeling',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'End',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readHorribleSuitsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readHorribleSuitsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readHorribleSuitsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readHorribleSuitsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readHorribleSuitsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('HorribleSuit'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadHorribleSuitsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadHorribleSuitsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadHorribleSuitsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadHorribleSuitsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadHorribleSuitsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function HorribleSuitUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'HorribleSuitUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Feeling', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'End', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'JoblessRoadID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function HorribleSuitCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'HorribleSuitCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Feeling', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'End', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'JoblessRoadID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function Hospital()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'Hospital',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Wash',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Grade',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Tub',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readHospitalsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readHospitalsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readHospitalsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readHospitalsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readHospitalsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Hospital'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadHospitalsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadHospitalsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadHospitalsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadHospitalsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadHospitalsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function HospitalUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'HospitalUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Wash', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'MightyTrainDoorID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'AlikeSwingID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Grade', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Tub', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'CaveID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function HospitalCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'HospitalCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Wash', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'MightyTrainDoorID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'AlikeSwingID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Grade', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Tub', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'CaveID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function HospitalWithDescendants()
    {
        return new \GraphQL\Type\Definition\UnionType(array(
            'name' => 'HospitalWithDescendants',
            'resolveType' => SilverStripe\GraphQL\Resolvers\UnionResolverFactory::create(array())->createClosure($this),
            'types' => SilverStripe\GraphQL\Storage\Encode\UnionTypeFactory::create(array(
                'types' => array(
                    'Hospital',
                    'DisturbedShow'
                )
            ))->createClosure($this)
        ));
    }

    private function HypnoticControlDoctor()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'HypnoticControlDoctor',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Line',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Month',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Volleyball',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Legs',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Aftermath',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readHypnoticControlDoctorsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readHypnoticControlDoctorsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readHypnoticControlDoctorsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readHypnoticControlDoctorsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readHypnoticControlDoctorsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('HypnoticControlDoctor'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadHypnoticControlDoctorsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadHypnoticControlDoctorsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadHypnoticControlDoctorsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadHypnoticControlDoctorsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadHypnoticControlDoctorsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function HypnoticControlDoctorUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'HypnoticControlDoctorUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Line', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Month', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Volleyball', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Legs', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Aftermath', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'CribID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function HypnoticControlDoctorCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'HypnoticControlDoctorCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Line', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Month', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Volleyball', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Legs', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Aftermath', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'CribID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function IndustriousAdvertisement()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'IndustriousAdvertisement',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Boot',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Test',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Duck',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readIndustriousAdvertisementsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readIndustriousAdvertisementsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readIndustriousAdvertisementsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readIndustriousAdvertisementsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readIndustriousAdvertisementsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('IndustriousAdvertisement'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadIndustriousAdvertisementsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadIndustriousAdvertisementsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadIndustriousAdvertisementsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadIndustriousAdvertisementsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadIndustriousAdvertisementsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function IndustriousAdvertisementUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'IndustriousAdvertisementUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Boot', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Test', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Duck', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'WeakCoatSockID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'PorterID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'TopID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function IndustriousAdvertisementCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'IndustriousAdvertisementCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Boot', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Test', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Duck', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'WeakCoatSockID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'PorterID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'TopID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function IndustriousGrandmotherUmbrella()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'IndustriousGrandmotherUmbrella',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Ghost',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Badge',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'End',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Coat',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Stretch',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'UndesirableBeefs',
                        'type' => $this->getType('UndesirableBeefsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => array(
                                'SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver',
                                'resolve'
                            ),
                            'parentResolverFactory' => null,
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    )
                );
            }
        ));
    }

    private function readIndustriousGrandmotherUmbrellasConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readIndustriousGrandmotherUmbrellasConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readIndustriousGrandmotherUmbrellasEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readIndustriousGrandmotherUmbrellasEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readIndustriousGrandmotherUmbrellasEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('IndustriousGrandmotherUmbrella'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadIndustriousGrandmotherUmbrellasSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadIndustriousGrandmotherUmbrellasSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadIndustriousGrandmotherUmbrellasSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadIndustriousGrandmotherUmbrellasSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadIndustriousGrandmotherUmbrellasSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function IndustriousGrandmotherUmbrellaUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'IndustriousGrandmotherUmbrellaUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Ghost', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Badge', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'End', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Coat', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Stretch', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'HelpfulAgreementID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function IndustriousGrandmotherUmbrellaCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'IndustriousGrandmotherUmbrellaCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Ghost', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Badge', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'End', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Coat', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Stretch', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'HelpfulAgreementID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function UndesirableBeefsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'UndesirableBeefsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('UndesirableBeefsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function UndesirableBeefsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'UndesirableBeefsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('UndesirableBeef'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function UndesirableBeefsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'UndesirableBeefsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('UndesirableBeefsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function UndesirableBeefsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'UndesirableBeefsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function Jar()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'Jar',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Smoke',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Legs',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readJarsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readJarsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readJarsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readJarsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readJarsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Jar'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadJarsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadJarsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadJarsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadJarsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadJarsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function JarUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'JarUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Smoke', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Legs', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'RangeID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function JarCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'JarCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Smoke', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Legs', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'RangeID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function JitteryUmbrella()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'JitteryUmbrella',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Trouble',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Crib',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Drawer',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Range',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readJitteryUmbrellasConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readJitteryUmbrellasConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readJitteryUmbrellasEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readJitteryUmbrellasEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readJitteryUmbrellasEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('JitteryUmbrella'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadJitteryUmbrellasSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadJitteryUmbrellasSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadJitteryUmbrellasSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadJitteryUmbrellasSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadJitteryUmbrellasSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function JitteryUmbrellaUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'JitteryUmbrellaUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Trouble', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Crib', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Drawer', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Range', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ThoughtfulNeedCarsID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'HeavyDucksChannelID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'HobbiesID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function JitteryUmbrellaCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'JitteryUmbrellaCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Trouble', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Crib', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Drawer', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Range', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ThoughtfulNeedCarsID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'HeavyDucksChannelID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'HobbiesID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function Page()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'Page',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readPagesConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readPagesConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readPagesEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readPagesEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readPagesEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Page'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadPagesSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadPagesSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadPagesSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadPagesSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadPagesSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function PageUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'PageUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function PageCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'PageCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function PageWithDescendants()
    {
        return new \GraphQL\Type\Definition\UnionType(array(
            'name' => 'PageWithDescendants',
            'resolveType' => SilverStripe\GraphQL\Resolvers\UnionResolverFactory::create(array())->createClosure($this),
            'types' => SilverStripe\GraphQL\Storage\Encode\UnionTypeFactory::create(array(
                'types' => array(
                    'Page',
                    'AbrasiveCoatRange',
                    'AbrasiveExchangeShade',
                    'AbsentLadybug',
                    'ActuallyMittenActivity',
                    'Advertisement',
                    'AlikeSheep',
                    'AlikeSwing',
                    'AmbiguousDuck',
                    'AttractiveQuietHospital',
                    'Badge',
                    'BerserkQuestion',
                    'Bridge',
                    'BumpyCave',
                    'Cars',
                    'Cave',
                    'CeaselessKittens',
                    'Channel',
                    'Chickens',
                    'Coast',
                    'CoherentCaveReligion',
                    'Committee',
                    'CooperativeExistenceNight',
                    'CuddlyBoard',
                    'CurvedWashTop',
                    'CutEffectBoard',
                    'Dinosaurs',
                    'DisagreeableBeef',
                    'Ducks',
                    'DustyGhostNight',
                    'EagerHill',
                    'EfficaciousTreesHat',
                    'EliteCrib',
                    'ErectAftermathJudge',
                    'EtherealLossSpark',
                    'FamiliarReligion',
                    'FarflungChickensLegs',
                    'FierceBridgeBeef',
                    'FierceBulb',
                    'FunctionalDirt',
                    'Grip',
                    'GrotesqueJail',
                    'HappyAirplaneSwing',
                    'HelpfulAgreement',
                    'HelpfulChannelBirds',
                    'HighpitchedRegretCake',
                    'HistoricalYard',
                    'Hobbies',
                    'Holiday',
                    'HolisticSmell',
                    'HypnoticControlDoctor',
                    'Jar',
                    'JitteryUmbrella',
                    'JoblessRoad',
                    'LamentableFactWheel',
                    'LamentableWriterMove',
                    'Level',
                    'LowLadybug',
                    'MeatySuit',
                    'MeltedStoveSpark',
                    'MomentousSheepPorter',
                    'Month',
                    'PanickyBeefPull',
                    'PanickyFairiesJudge',
                    'PastEnd',
                    'Pigs',
                    'PleasantRange',
                    'Point',
                    'PoisedFruitAgreement',
                    'Popcorn',
                    'PumpedAdjustment',
                    'PumpedCarsTiger',
                    'QuarrelsomeRabbits',
                    'Range',
                    'RealHobbies',
                    'RealYard',
                    'ReflectivePoint',
                    'Religion',
                    'Sheep',
                    'ShockingFear',
                    'ShortIce',
                    'ShortScarfPoint',
                    'SpicyCoast',
                    'Spot',
                    'SqueamishPopcornPlayground',
                    'StormyAttackFriend',
                    'SturdyBabiesHospital',
                    'TabooFear',
                    'TastyBadge',
                    'TenderHate',
                    'ThoughtfulNeedCars',
                    'ThoughtlessEnd',
                    'Top',
                    'Trouble',
                    'UnadvisedSupportVeil',
                    'UnadvisedWine',
                    'UndesirableBeef',
                    'WakefulRub',
                    'Watch',
                    'WeakCoatSock',
                    'WhisperingMove',
                    'WindyJudge',
                    'WoodenTheoryScarf',
                    'WrongAftermath',
                    'SilverStripeErrorPage',
                    'SilverStripeRedirectorPage',
                    'SilverStripeVirtualPage',
                    'ThoughtlessObservation',
                    'MindlessSmoke',
                    'BrightSofa',
                    'Trade',
                    'LivelyDucksTrain',
                    'Hospital',
                    'DisturbedShow',
                    'Bells',
                    'Cushion',
                    'LeftTrain',
                    'BriefSparkHospital',
                    'UppityVest',
                    'Haircut'
                )
            ))->createClosure($this)
        ));
    }

    private function SilverStripeSiteTree()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'SilverStripeSiteTree',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readSilverStripeSiteTreesConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readSilverStripeSiteTreesConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readSilverStripeSiteTreesEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readSilverStripeSiteTreesEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readSilverStripeSiteTreesEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('SilverStripeSiteTree'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadSilverStripeSiteTreesSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadSilverStripeSiteTreesSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadSilverStripeSiteTreesSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadSilverStripeSiteTreesSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadSilverStripeSiteTreesSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function SilverStripeSiteTreeUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'SilverStripeSiteTreeUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function SilverStripeSiteTreeCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'SilverStripeSiteTreeCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function SilverStripeSiteTreeWithDescendants()
    {
        return new \GraphQL\Type\Definition\UnionType(array(
            'name' => 'SilverStripeSiteTreeWithDescendants',
            'resolveType' => SilverStripe\GraphQL\Resolvers\UnionResolverFactory::create(array())->createClosure($this),
            'types' => SilverStripe\GraphQL\Storage\Encode\UnionTypeFactory::create(array(
                'types' => array(
                    'SilverStripeSiteTree',
                    'Page',
                    'AbrasiveCoatRange',
                    'AbrasiveExchangeShade',
                    'AbsentLadybug',
                    'ActuallyMittenActivity',
                    'Advertisement',
                    'AlikeSheep',
                    'AlikeSwing',
                    'AmbiguousDuck',
                    'AttractiveQuietHospital',
                    'Badge',
                    'BerserkQuestion',
                    'Bridge',
                    'BumpyCave',
                    'Cars',
                    'Cave',
                    'CeaselessKittens',
                    'Channel',
                    'Chickens',
                    'Coast',
                    'CoherentCaveReligion',
                    'Committee',
                    'CooperativeExistenceNight',
                    'CuddlyBoard',
                    'CurvedWashTop',
                    'CutEffectBoard',
                    'Dinosaurs',
                    'DisagreeableBeef',
                    'Ducks',
                    'DustyGhostNight',
                    'EagerHill',
                    'EfficaciousTreesHat',
                    'EliteCrib',
                    'ErectAftermathJudge',
                    'EtherealLossSpark',
                    'FamiliarReligion',
                    'FarflungChickensLegs',
                    'FierceBridgeBeef',
                    'FierceBulb',
                    'FunctionalDirt',
                    'Grip',
                    'GrotesqueJail',
                    'HappyAirplaneSwing',
                    'HelpfulAgreement',
                    'HelpfulChannelBirds',
                    'HighpitchedRegretCake',
                    'HistoricalYard',
                    'Hobbies',
                    'Holiday',
                    'HolisticSmell',
                    'HypnoticControlDoctor',
                    'Jar',
                    'JitteryUmbrella',
                    'JoblessRoad',
                    'LamentableFactWheel',
                    'LamentableWriterMove',
                    'Level',
                    'LowLadybug',
                    'MeatySuit',
                    'MeltedStoveSpark',
                    'MomentousSheepPorter',
                    'Month',
                    'PanickyBeefPull',
                    'PanickyFairiesJudge',
                    'PastEnd',
                    'Pigs',
                    'PleasantRange',
                    'Point',
                    'PoisedFruitAgreement',
                    'Popcorn',
                    'PumpedAdjustment',
                    'PumpedCarsTiger',
                    'QuarrelsomeRabbits',
                    'Range',
                    'RealHobbies',
                    'RealYard',
                    'ReflectivePoint',
                    'Religion',
                    'Sheep',
                    'ShockingFear',
                    'ShortIce',
                    'ShortScarfPoint',
                    'SpicyCoast',
                    'Spot',
                    'SqueamishPopcornPlayground',
                    'StormyAttackFriend',
                    'SturdyBabiesHospital',
                    'TabooFear',
                    'TastyBadge',
                    'TenderHate',
                    'ThoughtfulNeedCars',
                    'ThoughtlessEnd',
                    'Top',
                    'Trouble',
                    'UnadvisedSupportVeil',
                    'UnadvisedWine',
                    'UndesirableBeef',
                    'WakefulRub',
                    'Watch',
                    'WeakCoatSock',
                    'WhisperingMove',
                    'WindyJudge',
                    'WoodenTheoryScarf',
                    'WrongAftermath',
                    'SilverStripeErrorPage',
                    'SilverStripeRedirectorPage',
                    'SilverStripeVirtualPage',
                    'ThoughtlessObservation',
                    'MindlessSmoke',
                    'BrightSofa',
                    'Trade',
                    'LivelyDucksTrain',
                    'Hospital',
                    'DisturbedShow',
                    'Bells',
                    'Cushion',
                    'LeftTrain',
                    'BriefSparkHospital',
                    'UppityVest',
                    'Haircut'
                )
            ))->createClosure($this)
        ));
    }

    private function Soap()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'Soap',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'description' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function Popcorn()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'Popcorn',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'description' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function TabooFear()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'TabooFear',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'description' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ThoughtlessObservation()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'ThoughtlessObservation',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Dirt',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readThoughtlessObservationsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readThoughtlessObservationsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readThoughtlessObservationsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readThoughtlessObservationsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readThoughtlessObservationsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('ThoughtlessObservation'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadThoughtlessObservationsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadThoughtlessObservationsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadThoughtlessObservationsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadThoughtlessObservationsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadThoughtlessObservationsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function ThoughtlessObservationUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ThoughtlessObservationUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Dirt', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Pencil', 'type' => GraphQL\Type\Definition\Type::boolean())
                );
            }
        ));
    }

    private function ThoughtlessObservationCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ThoughtlessObservationCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Dirt', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Pencil', 'type' => GraphQL\Type\Definition\Type::boolean())
                );
            }
        ));
    }

    private function Sheep()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'Sheep',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Adjustment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Agreement',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Bulb',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Popcorn',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Cake',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readSheepsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readSheepsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readSheepsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readSheepsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readSheepsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Sheep'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadSheepsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadSheepsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadSheepsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadSheepsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadSheepsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function SheepUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'SheepUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Adjustment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Agreement', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Bulb', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Popcorn', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Cake', 'type' => GraphQL\Type\Definition\Type::string())
                );
            }
        ));
    }

    private function SheepCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'SheepCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Adjustment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Agreement', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Bulb', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Popcorn', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Cake', 'type' => GraphQL\Type\Definition\Type::string())
                );
            }
        ));
    }

    private function SheepWithDescendants()
    {
        return new \GraphQL\Type\Definition\UnionType(array(
            'name' => 'SheepWithDescendants',
            'resolveType' => SilverStripe\GraphQL\Resolvers\UnionResolverFactory::create(array())->createClosure($this),
            'types' => SilverStripe\GraphQL\Storage\Encode\UnionTypeFactory::create(array(
                'types' => array(
                    'Sheep',
                    'Bells'
                )
            ))->createClosure($this)
        ));
    }

    private function Thing()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'Thing',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'description' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function Trade()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'Trade',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'Sleep',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Control',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Slip',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Fear',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readTradesConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readTradesConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readTradesEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readTradesEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readTradesEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Trade'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadTradesSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadTradesSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadTradesSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadTradesSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadTradesSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function TradeUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'TradeUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Slip', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Fear', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sleep', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Control', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'BoundlessDoctorBeadID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Watch', 'type' => GraphQL\Type\Definition\Type::int())
                );
            }
        ));
    }

    private function TradeCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'TradeCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Slip', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Fear', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sleep', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Control', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'BoundlessDoctorBeadID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Watch', 'type' => GraphQL\Type\Definition\Type::int())
                );
            }
        ));
    }

    private function TightfistedChannelDivision()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'TightfistedChannelDivision',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'description' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ThoughtfulNeedCars()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'ThoughtfulNeedCars',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Babies',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Wash',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sign',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Playground',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readThoughtfulNeedCarssConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readThoughtfulNeedCarssConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readThoughtfulNeedCarssEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readThoughtfulNeedCarssEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readThoughtfulNeedCarssEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('ThoughtfulNeedCars'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadThoughtfulNeedCarssSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadThoughtfulNeedCarssSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadThoughtfulNeedCarssSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadThoughtfulNeedCarssSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadThoughtfulNeedCarssSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function ThoughtfulNeedCarsUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ThoughtfulNeedCarsUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Babies', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Wash', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Sign', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Playground', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'KeyID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'CapriciousTitleID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'PanickyBeefPullID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function ThoughtfulNeedCarsCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ThoughtfulNeedCarsCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Babies', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Wash', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Sign', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Playground', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'KeyID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'CapriciousTitleID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'PanickyBeefPullID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function ThoughtfulNeedCarsWithDescendants()
    {
        return new \GraphQL\Type\Definition\UnionType(array(
            'name' => 'ThoughtfulNeedCarsWithDescendants',
            'resolveType' => SilverStripe\GraphQL\Resolvers\UnionResolverFactory::create(array())->createClosure($this),
            'types' => SilverStripe\GraphQL\Storage\Encode\UnionTypeFactory::create(array(
                'types' => array(
                    'ThoughtfulNeedCars',
                    'BriefSparkHospital',
                    'UppityVest'
                )
            ))->createClosure($this)
        ));
    }

    private function ReconditeVolleyballMitten()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'ReconditeVolleyballMitten',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Industry',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Swing',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Soap',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readReconditeVolleyballMittensConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readReconditeVolleyballMittensConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readReconditeVolleyballMittensEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readReconditeVolleyballMittensEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readReconditeVolleyballMittensEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('ReconditeVolleyballMitten'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadReconditeVolleyballMittensSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadReconditeVolleyballMittensSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadReconditeVolleyballMittensSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadReconditeVolleyballMittensSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadReconditeVolleyballMittensSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function ReconditeVolleyballMittenUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReconditeVolleyballMittenUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Industry', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Swing', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Soap', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'DispensableAftermathID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Story', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Straw', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'War', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Bead', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Temper', 'type' => GraphQL\Type\Definition\Type::boolean())
                );
            }
        ));
    }

    private function ReconditeVolleyballMittenCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReconditeVolleyballMittenCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Industry', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Swing', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Soap', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'DispensableAftermathID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Story', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Straw', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'War', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Bead', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Temper', 'type' => GraphQL\Type\Definition\Type::boolean())
                );
            }
        ));
    }

    private function Support()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'Support',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Industry',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Swing',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Soap',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readSupportsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readSupportsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readSupportsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readSupportsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readSupportsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Support'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadSupportsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadSupportsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadSupportsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadSupportsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadSupportsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function SupportUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'SupportUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Industry', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Swing', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Soap', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'DispensableAftermathID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Move', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Ducks', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sock', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Chickens', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Road', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'SpotID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function SupportCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'SupportCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Industry', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Swing', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Soap', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'DispensableAftermathID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Move', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Ducks', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sock', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Chickens', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Road', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'SpotID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function Key()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'Key',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'Mitten',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Cushion',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Playground',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Fairies',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Place',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readKeysConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readKeysConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readKeysEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readKeysEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readKeysEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Key'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadKeysSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadKeysSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadKeysSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadKeysSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadKeysSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function KeyUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'KeyUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Playground', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Fairies', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Place', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ThoughtfulNeedCarsID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'ShadeID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'MonthID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Mitten', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Cushion', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'HelpfulChannelBirdsID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'MomentousSheepPorterID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'WrongAftermathID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Health', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Attack', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Sneeze', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Ghost', 'type' => GraphQL\Type\Definition\Type::int())
                );
            }
        ));
    }

    private function KeyCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'KeyCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Playground', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Fairies', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Place', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ThoughtfulNeedCarsID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'ShadeID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'MonthID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Mitten', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Cushion', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'HelpfulChannelBirdsID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'MomentousSheepPorterID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'WrongAftermathID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Health', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Attack', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Sneeze', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Ghost', 'type' => GraphQL\Type\Definition\Type::int())
                );
            }
        ));
    }

    private function MindlessSmoke()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'MindlessSmoke',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Agreement',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Pleasure',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readMindlessSmokesConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readMindlessSmokesConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readMindlessSmokesEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readMindlessSmokesEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readMindlessSmokesEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('MindlessSmoke'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadMindlessSmokesSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadMindlessSmokesSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadMindlessSmokesSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadMindlessSmokesSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadMindlessSmokesSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function MindlessSmokeUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'MindlessSmokeUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Agreement', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Pleasure', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Angle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Basket', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Sea', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Boot', 'type' => GraphQL\Type\Definition\Type::string())
                );
            }
        ));
    }

    private function MindlessSmokeCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'MindlessSmokeCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Agreement', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Pleasure', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Angle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Basket', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Sea', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Boot', 'type' => GraphQL\Type\Definition\Type::string())
                );
            }
        ));
    }

    private function PanickyChickens()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'PanickyChickens',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Pleasure',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Bike',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Train',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Pigs',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readPanickyChickenssConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readPanickyChickenssConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readPanickyChickenssEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readPanickyChickenssEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readPanickyChickenssEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('PanickyChickens'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadPanickyChickenssSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadPanickyChickenssSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadPanickyChickenssSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadPanickyChickenssSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadPanickyChickenssSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function PanickyChickensUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'PanickyChickensUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Pleasure', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Bike', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Train', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Pigs', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'TightfistedChannelDivisionID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function PanickyChickensCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'PanickyChickensCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Pleasure', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Bike', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Train', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Pigs', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'TightfistedChannelDivisionID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function PanickyChickensWithDescendants()
    {
        return new \GraphQL\Type\Definition\UnionType(array(
            'name' => 'PanickyChickensWithDescendants',
            'resolveType' => SilverStripe\GraphQL\Resolvers\UnionResolverFactory::create(array())->createClosure($this),
            'types' => SilverStripe\GraphQL\Storage\Encode\UnionTypeFactory::create(array(
                'types' => array(
                    'PanickyChickens',
                    'CurvedPlace'
                )
            ))->createClosure($this)
        ));
    }

    private function Spot()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'Spot',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Profit',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readSpotsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readSpotsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readSpotsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readSpotsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readSpotsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Spot'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadSpotsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadSpotsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadSpotsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadSpotsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadSpotsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function SpotUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'SpotUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Profit', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'JitteryUmbrellaID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function SpotCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'SpotCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Profit', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'JitteryUmbrellaID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function SpotWithDescendants()
    {
        return new \GraphQL\Type\Definition\UnionType(array(
            'name' => 'SpotWithDescendants',
            'resolveType' => SilverStripe\GraphQL\Resolvers\UnionResolverFactory::create(array())->createClosure($this),
            'types' => SilverStripe\GraphQL\Storage\Encode\UnionTypeFactory::create(array(
                'types' => array(
                    'Spot',
                    'Cushion'
                )
            ))->createClosure($this)
        ));
    }

    private function ReadyBirdsKey()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'ReadyBirdsKey',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'description' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function Yard()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'Yard',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Chickens',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readYardsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readYardsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readYardsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readYardsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readYardsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Yard'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadYardsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadYardsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadYardsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadYardsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadYardsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function YardUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'YardUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Chickens', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'CurvedSheepNeedID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'HorribleSuitID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'AheadFriendID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function YardCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'YardCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Chickens', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'CurvedSheepNeedID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'HorribleSuitID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'AheadFriendID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function YardWithDescendants()
    {
        return new \GraphQL\Type\Definition\UnionType(array(
            'name' => 'YardWithDescendants',
            'resolveType' => SilverStripe\GraphQL\Resolvers\UnionResolverFactory::create(array())->createClosure($this),
            'types' => SilverStripe\GraphQL\Storage\Encode\UnionTypeFactory::create(array(
                'types' => array(
                    'Yard',
                    'EliteKittensNight'
                )
            ))->createClosure($this)
        ));
    }

    private function WindyJudge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'WindyJudge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'description' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReflectivePoint()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'ReflectivePoint',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Wash',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readReflectivePointsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readReflectivePointsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readReflectivePointsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readReflectivePointsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readReflectivePointsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('ReflectivePoint'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadReflectivePointsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadReflectivePointsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadReflectivePointsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadReflectivePointsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadReflectivePointsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function ReflectivePointUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReflectivePointUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Wash', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'MightyTrainDoorID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'AlikeSwingID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function ReflectivePointCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReflectivePointCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Wash', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'MightyTrainDoorID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'AlikeSwingID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function ReflectivePointWithDescendants()
    {
        return new \GraphQL\Type\Definition\UnionType(array(
            'name' => 'ReflectivePointWithDescendants',
            'resolveType' => SilverStripe\GraphQL\Resolvers\UnionResolverFactory::create(array())->createClosure($this),
            'types' => SilverStripe\GraphQL\Storage\Encode\UnionTypeFactory::create(array(
                'types' => array(
                    'ReflectivePoint',
                    'Hospital',
                    'DisturbedShow'
                )
            ))->createClosure($this)
        ));
    }

    private function SpicyCoast()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'SpicyCoast',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'description' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ThoughtlessEnd()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'ThoughtlessEnd',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanViewType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'CanEditType',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'URLSegment',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Title',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MenuTitle',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Content',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'MetaDescription',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ExtraMeta',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInMenus',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ShowInSearch',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sort',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenFile',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'HasBrokenLink',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ReportClass',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Sheep',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readThoughtlessEndsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readThoughtlessEndsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readThoughtlessEndsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readThoughtlessEndsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readThoughtlessEndsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('ThoughtlessEnd'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadThoughtlessEndsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadThoughtlessEndsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadThoughtlessEndsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadThoughtlessEndsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadThoughtlessEndsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function ThoughtlessEndUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ThoughtlessEndUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Sheep', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'FeelingID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'WoodenTheoryScarfID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'MeltedStoveSparkID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function ThoughtlessEndCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ThoughtlessEndCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanViewType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'CanEditType', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'URLSegment', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Title', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MenuTitle', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Content', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'MetaDescription', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ExtraMeta', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ShowInMenus', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ShowInSearch', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'Sort', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'HasBrokenFile', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'HasBrokenLink', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'ReportClass', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'ParentID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Sheep', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'FeelingID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'WoodenTheoryScarfID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'MeltedStoveSparkID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function ThoughtlessEndWithDescendants()
    {
        return new \GraphQL\Type\Definition\UnionType(array(
            'name' => 'ThoughtlessEndWithDescendants',
            'resolveType' => SilverStripe\GraphQL\Resolvers\UnionResolverFactory::create(array())->createClosure($this),
            'types' => SilverStripe\GraphQL\Storage\Encode\UnionTypeFactory::create(array(
                'types' => array(
                    'ThoughtlessEnd',
                    'Haircut'
                )
            ))->createClosure($this)
        ));
    }

    private function Rub()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'Rub',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'ClassName',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'LastEdited',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Created',
                        'type' => GraphQL\Type\Definition\Type::string(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Version',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Test',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Toy',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'Wine',
                        'type' => GraphQL\Type\Definition\Type::boolean(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    ),
                    array(
                        'name' => 'View',
                        'type' => GraphQL\Type\Definition\Type::int(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readRubsConnection()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readRubsConnection',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'pageInfo',
                        'description' => 'Pagination information',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageInfo')),
                        'args' => array()
                    ),
                    array(
                        'name' => 'edges',
                        'description' => 'Collection of records',
                        'type' => GraphQL\Type\Definition\Type::listOf($this->getType('readRubsEdge')),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function readRubsEdge()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'readRubsEdge',
            'description' => 'The collections edge',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'node',
                        'description' => 'The node at the end of the collections edge',
                        'type' => $this->getType('Rub'),
                        'resolve' => array('SilverStripe\\GraphQL\\Pagination\\Connection', 'nodeResolver'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function ReadRubsSortInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'ReadRubsSortInputType',
            'description' => 'Define the sorting',
            'fields' => function () {
                return array(
                    array(
                        'description' => 'Sort field name.',
                        'name' => 'field',
                        'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReadRubsSortFieldType'))
                    ),
                    array(
                        'description' => 'Sort direction (ASC / DESC)',
                        'name' => 'direction',
                        'type' => $this->getType('SortDirection')
                    )
                );
            }
        ));
    }

    private function ReadRubsSortFieldType()
    {
        return new \GraphQL\Type\Definition\EnumType(array(
            'name' => 'ReadRubsSortFieldType',
            'description' => 'Field name to sort by.',
            'values' => array()
        ));
    }

    private function RubUpdateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'RubUpdateInputType',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                    ),
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Test', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Toy', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Wine', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'View', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'CeaselessKittensID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'AdvertisementID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Hill', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Theory', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Spark', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'QuarrelsomeRabbitsID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'LowLadybugID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'RealHobbiesID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function RubCreateInputType()
    {
        return new \GraphQL\Type\Definition\InputObjectType(array(
            'name' => 'RubCreateInputType',
            'fields' => function () {
                return array(
                    array('name' => 'ClassName', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'LastEdited', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Created', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Version', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Test', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Toy', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Wine', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'View', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'CeaselessKittensID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'AdvertisementID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'Hill', 'type' => GraphQL\Type\Definition\Type::string()),
                    array('name' => 'Theory', 'type' => GraphQL\Type\Definition\Type::int()),
                    array('name' => 'Spark', 'type' => GraphQL\Type\Definition\Type::boolean()),
                    array('name' => 'QuarrelsomeRabbitsID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'LowLadybugID', 'type' => GraphQL\Type\Definition\Type::id()),
                    array('name' => 'RealHobbiesID', 'type' => GraphQL\Type\Definition\Type::id())
                );
            }
        ));
    }

    private function PumpedAdjustment()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'PumpedAdjustment',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'description' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function LeftTrain()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'LeftTrain',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'description' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function SmellySmokeCast()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'SmellySmokeCast',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'description' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function TitleRecord()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'TitleRecord',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'description' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function Trouble()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'Trouble',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'description' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function UndesirableBeef()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'UndesirableBeef',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'ID',
                        'description' => 'ID',
                        'type' => GraphQL\Type\Definition\Type::id(),
                        'resolve' => array('SilverStripe\\GraphQL\\Resolvers\\FieldAccessorResolver', 'resolve'),
                        'args' => array()
                    )
                );
            }
        ));
    }

    private function Query()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'Query',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'readAbrasiveCoatRanges',
                        'type' => $this->getType('readAbrasiveCoatRangesConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'AbrasiveCoatRange'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneAbrasiveCoatRange',
                        'type' => $this->getType('AbrasiveCoatRange'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'AbrasiveCoatRange'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readAbrasiveExchangeShades',
                        'type' => $this->getType('readAbrasiveExchangeShadesConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'AbrasiveExchangeShade'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneAbrasiveExchangeShade',
                        'type' => $this->getType('AbrasiveExchangeShade'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'AbrasiveExchangeShade'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readAbsentLadybugs',
                        'type' => $this->getType('readAbsentLadybugsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'AbsentLadybug'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneAbsentLadybug',
                        'type' => $this->getType('AbsentLadybug'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'AbsentLadybug'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readAbundantTigers',
                        'type' => $this->getType('readAbundantTigersConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'AbundantTiger'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneAbundantTiger',
                        'type' => $this->getType('AbundantTiger'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'AbundantTiger'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readActuallyMittenActivities',
                        'type' => $this->getType('readActuallyMittenActivitiesConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'ActuallyMittenActivity'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneActuallyMittenActivity',
                        'type' => $this->getType('ActuallyMittenActivity'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'ActuallyMittenActivity'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readAdvertisements',
                        'type' => $this->getType('readAdvertisementsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'Advertisement'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneAdvertisement',
                        'type' => $this->getType('Advertisement'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'Advertisement'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readAggressiveStretchPigss',
                        'type' => $this->getType('readAggressiveStretchPigssConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'AggressiveStretchPigs'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneAggressiveStretchPigs',
                        'type' => $this->getType('AggressiveStretchPigs'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'AggressiveStretchPigs'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readAgreements',
                        'type' => $this->getType('readAgreementsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'Agreement'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneAgreement',
                        'type' => $this->getType('Agreement'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'Agreement'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readAheadFairiesBridges',
                        'type' => $this->getType('readAheadFairiesBridgesConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'AheadFairiesBridge'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneAheadFairiesBridge',
                        'type' => $this->getType('AheadFairiesBridge'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'AheadFairiesBridge'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readAheadFriends',
                        'type' => $this->getType('readAheadFriendsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'AheadFriend'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneAheadFriend',
                        'type' => $this->getType('AheadFriend'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'AheadFriend'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readAlikeSheeps',
                        'type' => $this->getType('readAlikeSheepsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'AlikeSheep'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneAlikeSheep',
                        'type' => $this->getType('AlikeSheep'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'AlikeSheep'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readAlikeSwings',
                        'type' => $this->getType('readAlikeSwingsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'AlikeSwing'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneAlikeSwing',
                        'type' => $this->getType('AlikeSwing'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'AlikeSwing'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readAmbiguousDucks',
                        'type' => $this->getType('readAmbiguousDucksConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'AmbiguousDuck'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneAmbiguousDuck',
                        'type' => $this->getType('AmbiguousDuck'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'AmbiguousDuck'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readAngles',
                        'type' => $this->getType('readAnglesConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'Angle'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneAngle',
                        'type' => $this->getType('Angle'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'Angle'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readAttractiveQuietHospitals',
                        'type' => $this->getType('readAttractiveQuietHospitalsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'AttractiveQuietHospital'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneAttractiveQuietHospital',
                        'type' => $this->getType('AttractiveQuietHospital'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'AttractiveQuietHospital'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readBabies',
                        'type' => $this->getType('readBabiesConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'Baby'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneBaby',
                        'type' => $this->getType('Baby'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'Baby'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readBadges',
                        'type' => $this->getType('readBadgesConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'Badge'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneBadge',
                        'type' => $this->getType('Badge'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'Badge'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readBellss',
                        'type' => $this->getType('readBellssConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'Bells'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneBells',
                        'type' => $this->getType('Bells'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'Bells'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readBerserkQuestions',
                        'type' => $this->getType('readBerserkQuestionsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'BerserkQuestion'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneBerserkQuestion',
                        'type' => $this->getType('BerserkQuestion'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'BerserkQuestion'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readBoots',
                        'type' => $this->getType('readBootsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'Boot'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneBoot',
                        'type' => $this->getType('Boot'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'Boot'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readBoundlessDoctorBeads',
                        'type' => $this->getType('readBoundlessDoctorBeadsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'BoundlessDoctorBead'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneBoundlessDoctorBead',
                        'type' => $this->getType('BoundlessDoctorBead'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'BoundlessDoctorBead'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readBridges',
                        'type' => $this->getType('readBridgesConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'Bridge'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneBridge',
                        'type' => $this->getType('Bridge'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'Bridge'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readBriefSparkHospitals',
                        'type' => $this->getType('readBriefSparkHospitalsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'BriefSparkHospital'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneBriefSparkHospital',
                        'type' => $this->getType('BriefSparkHospital'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'BriefSparkHospital'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readBrightSofas',
                        'type' => $this->getType('readBrightSofasConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'BrightSofa'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneBrightSofa',
                        'type' => $this->getType('BrightSofa'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'BrightSofa'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readBulbs',
                        'type' => $this->getType('readBulbsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'Bulb'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneBulb',
                        'type' => $this->getType('Bulb'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'Bulb'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readBumpyCaves',
                        'type' => $this->getType('readBumpyCavesConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'BumpyCave'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneBumpyCave',
                        'type' => $this->getType('BumpyCave'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'BumpyCave'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readCakes',
                        'type' => $this->getType('readCakesConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'Cake'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneCake',
                        'type' => $this->getType('Cake'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'Cake'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readCakess',
                        'type' => $this->getType('readCakessConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'Cakes'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneCakes',
                        'type' => $this->getType('Cakes'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'Cakes'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readCapriciousTitles',
                        'type' => $this->getType('readCapriciousTitlesConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'CapriciousTitle'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneCapriciousTitle',
                        'type' => $this->getType('CapriciousTitle'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'CapriciousTitle'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readCarss',
                        'type' => $this->getType('readCarssConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'Cars'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneCars',
                        'type' => $this->getType('Cars'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'Cars'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readCasts',
                        'type' => $this->getType('readCastsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'Cast'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneCast',
                        'type' => $this->getType('Cast'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'Cast'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readCaves',
                        'type' => $this->getType('readCavesConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'Cave'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneCave',
                        'type' => $this->getType('Cave'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'Cave'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readCeaselessBoards',
                        'type' => $this->getType('readCeaselessBoardsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'CeaselessBoard'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneCeaselessBoard',
                        'type' => $this->getType('CeaselessBoard'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'CeaselessBoard'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readCeaselessKittenss',
                        'type' => $this->getType('readCeaselessKittenssConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'CeaselessKittens'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneCeaselessKittens',
                        'type' => $this->getType('CeaselessKittens'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'CeaselessKittens'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readChannels',
                        'type' => $this->getType('readChannelsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'Channel'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneChannel',
                        'type' => $this->getType('Channel'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'Channel'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readChickenss',
                        'type' => $this->getType('readChickenssConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'Chickens'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneChickens',
                        'type' => $this->getType('Chickens'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'Chickens'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readCoasts',
                        'type' => $this->getType('readCoastsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'Coast'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneCoast',
                        'type' => $this->getType('Coast'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'Coast'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readCoherentCaveReligions',
                        'type' => $this->getType('readCoherentCaveReligionsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'CoherentCaveReligion'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneCoherentCaveReligion',
                        'type' => $this->getType('CoherentCaveReligion'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'CoherentCaveReligion'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readCommittees',
                        'type' => $this->getType('readCommitteesConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'Committee'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneCommittee',
                        'type' => $this->getType('Committee'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'Committee'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readCooperativeExistenceNights',
                        'type' => $this->getType('readCooperativeExistenceNightsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'CooperativeExistenceNight'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneCooperativeExistenceNight',
                        'type' => $this->getType('CooperativeExistenceNight'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'CooperativeExistenceNight'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readCravenStomachAdjustments',
                        'type' => $this->getType('readCravenStomachAdjustmentsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'CravenStomachAdjustment'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneCravenStomachAdjustment',
                        'type' => $this->getType('CravenStomachAdjustment'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'CravenStomachAdjustment'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readCribs',
                        'type' => $this->getType('readCribsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'Crib'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneCrib',
                        'type' => $this->getType('Crib'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'Crib'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readCuddlyBoards',
                        'type' => $this->getType('readCuddlyBoardsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'CuddlyBoard'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneCuddlyBoard',
                        'type' => $this->getType('CuddlyBoard'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'CuddlyBoard'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readCuriousSparkThreads',
                        'type' => $this->getType('readCuriousSparkThreadsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'CuriousSparkThread'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneCuriousSparkThread',
                        'type' => $this->getType('CuriousSparkThread'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'CuriousSparkThread'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readCurvedPlaces',
                        'type' => $this->getType('readCurvedPlacesConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'CurvedPlace'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneCurvedPlace',
                        'type' => $this->getType('CurvedPlace'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'CurvedPlace'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readCurvedSheepNeeds',
                        'type' => $this->getType('readCurvedSheepNeedsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'CurvedSheepNeed'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneCurvedSheepNeed',
                        'type' => $this->getType('CurvedSheepNeed'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'CurvedSheepNeed'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readCurvedWashTops',
                        'type' => $this->getType('readCurvedWashTopsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'CurvedWashTop'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneCurvedWashTop',
                        'type' => $this->getType('CurvedWashTop'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'CurvedWashTop'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readCushions',
                        'type' => $this->getType('readCushionsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'Cushion'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneCushion',
                        'type' => $this->getType('Cushion'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'Cushion'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readCutEffectBoards',
                        'type' => $this->getType('readCutEffectBoardsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'CutEffectBoard'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneCutEffectBoard',
                        'type' => $this->getType('CutEffectBoard'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'CutEffectBoard'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readCutShades',
                        'type' => $this->getType('readCutShadesConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'CutShade'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneCutShade',
                        'type' => $this->getType('CutShade'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'CutShade'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readDinosaurss',
                        'type' => $this->getType('readDinosaurssConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'Dinosaurs'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneDinosaurs',
                        'type' => $this->getType('Dinosaurs'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'Dinosaurs'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readDisagreeableBeefs',
                        'type' => $this->getType('readDisagreeableBeefsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'DisagreeableBeef'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneDisagreeableBeef',
                        'type' => $this->getType('DisagreeableBeef'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'DisagreeableBeef'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readDispensableAftermaths',
                        'type' => $this->getType('readDispensableAftermathsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'DispensableAftermath'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneDispensableAftermath',
                        'type' => $this->getType('DispensableAftermath'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'DispensableAftermath'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readDisturbedShows',
                        'type' => $this->getType('readDisturbedShowsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'DisturbedShow'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneDisturbedShow',
                        'type' => $this->getType('DisturbedShow'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'DisturbedShow'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readDoctors',
                        'type' => $this->getType('readDoctorsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'Doctor'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneDoctor',
                        'type' => $this->getType('Doctor'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'Doctor'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readDrops',
                        'type' => $this->getType('readDropsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'Drop'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneDrop',
                        'type' => $this->getType('Drop'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'Drop'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readDuckss',
                        'type' => $this->getType('readDuckssConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'Ducks'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneDucks',
                        'type' => $this->getType('Ducks'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'Ducks'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readDustyGhostNights',
                        'type' => $this->getType('readDustyGhostNightsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'DustyGhostNight'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneDustyGhostNight',
                        'type' => $this->getType('DustyGhostNight'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'DustyGhostNight'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readEagerHills',
                        'type' => $this->getType('readEagerHillsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'EagerHill'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneEagerHill',
                        'type' => $this->getType('EagerHill'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'EagerHill'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readEfficaciousTreesHats',
                        'type' => $this->getType('readEfficaciousTreesHatsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'EfficaciousTreesHat'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneEfficaciousTreesHat',
                        'type' => $this->getType('EfficaciousTreesHat'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'EfficaciousTreesHat'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readEliteCribs',
                        'type' => $this->getType('readEliteCribsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'EliteCrib'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneEliteCrib',
                        'type' => $this->getType('EliteCrib'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'EliteCrib'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readEliteKittensNights',
                        'type' => $this->getType('readEliteKittensNightsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'EliteKittensNight'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneEliteKittensNight',
                        'type' => $this->getType('EliteKittensNight'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'EliteKittensNight'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readErectAftermathJudges',
                        'type' => $this->getType('readErectAftermathJudgesConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'ErectAftermathJudge'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneErectAftermathJudge',
                        'type' => $this->getType('ErectAftermathJudge'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'ErectAftermathJudge'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readErectWheelAftermaths',
                        'type' => $this->getType('readErectWheelAftermathsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'ErectWheelAftermath'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneErectWheelAftermath',
                        'type' => $this->getType('ErectWheelAftermath'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'ErectWheelAftermath'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readEtherealLossSparks',
                        'type' => $this->getType('readEtherealLossSparksConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'EtherealLossSpark'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneEtherealLossSpark',
                        'type' => $this->getType('EtherealLossSpark'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'EtherealLossSpark'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readEtherealPlaceRoads',
                        'type' => $this->getType('readEtherealPlaceRoadsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'EtherealPlaceRoad'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneEtherealPlaceRoad',
                        'type' => $this->getType('EtherealPlaceRoad'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'EtherealPlaceRoad'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readFacts',
                        'type' => $this->getType('readFactsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'Fact'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneFact',
                        'type' => $this->getType('Fact'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'Fact'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readFamiliarReligions',
                        'type' => $this->getType('readFamiliarReligionsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'FamiliarReligion'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneFamiliarReligion',
                        'type' => $this->getType('FamiliarReligion'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'FamiliarReligion'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readFarflungChickensLegss',
                        'type' => $this->getType('readFarflungChickensLegssConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'FarflungChickensLegs'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneFarflungChickensLegs',
                        'type' => $this->getType('FarflungChickensLegs'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'FarflungChickensLegs'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readFeelings',
                        'type' => $this->getType('readFeelingsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'Feeling'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneFeeling',
                        'type' => $this->getType('Feeling'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'Feeling'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readFierceBridgeBeefs',
                        'type' => $this->getType('readFierceBridgeBeefsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'FierceBridgeBeef'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneFierceBridgeBeef',
                        'type' => $this->getType('FierceBridgeBeef'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'FierceBridgeBeef'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readFierceBulbs',
                        'type' => $this->getType('readFierceBulbsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'FierceBulb'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneFierceBulb',
                        'type' => $this->getType('FierceBulb'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'FierceBulb'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readFierceGrandmotherThreads',
                        'type' => $this->getType('readFierceGrandmotherThreadsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'FierceGrandmotherThread'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneFierceGrandmotherThread',
                        'type' => $this->getType('FierceGrandmotherThread'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'FierceGrandmotherThread'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readFierceWools',
                        'type' => $this->getType('readFierceWoolsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'FierceWool'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneFierceWool',
                        'type' => $this->getType('FierceWool'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'FierceWool'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readFineBaskets',
                        'type' => $this->getType('readFineBasketsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'FineBasket'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneFineBasket',
                        'type' => $this->getType('FineBasket'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'FineBasket'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readFineSleeps',
                        'type' => $this->getType('readFineSleepsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'FineSleep'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneFineSleep',
                        'type' => $this->getType('FineSleep'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'FineSleep'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readFunctionalDirts',
                        'type' => $this->getType('readFunctionalDirtsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'FunctionalDirt'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneFunctionalDirt',
                        'type' => $this->getType('FunctionalDirt'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'FunctionalDirt'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readGlisteningDropRooms',
                        'type' => $this->getType('readGlisteningDropRoomsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'GlisteningDropRoom'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneGlisteningDropRoom',
                        'type' => $this->getType('GlisteningDropRoom'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'GlisteningDropRoom'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readGrips',
                        'type' => $this->getType('readGripsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'Grip'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneGrip',
                        'type' => $this->getType('Grip'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'Grip'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readGrotesqueJails',
                        'type' => $this->getType('readGrotesqueJailsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'GrotesqueJail'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneGrotesqueJail',
                        'type' => $this->getType('GrotesqueJail'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'GrotesqueJail'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readHaircuts',
                        'type' => $this->getType('readHaircutsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'Haircut'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneHaircut',
                        'type' => $this->getType('Haircut'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'Haircut'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readHappyAirplaneSwings',
                        'type' => $this->getType('readHappyAirplaneSwingsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'HappyAirplaneSwing'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneHappyAirplaneSwing',
                        'type' => $this->getType('HappyAirplaneSwing'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'HappyAirplaneSwing'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readHappyMoveReasons',
                        'type' => $this->getType('readHappyMoveReasonsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'HappyMoveReason'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneHappyMoveReason',
                        'type' => $this->getType('HappyMoveReason'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'HappyMoveReason'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readHeavyDucksChannels',
                        'type' => $this->getType('readHeavyDucksChannelsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'HeavyDucksChannel'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneHeavyDucksChannel',
                        'type' => $this->getType('HeavyDucksChannel'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'HeavyDucksChannel'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readHelpfulAgreements',
                        'type' => $this->getType('readHelpfulAgreementsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'HelpfulAgreement'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneHelpfulAgreement',
                        'type' => $this->getType('HelpfulAgreement'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'HelpfulAgreement'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readHelpfulChannelBirdss',
                        'type' => $this->getType('readHelpfulChannelBirdssConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'HelpfulChannelBirds'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneHelpfulChannelBirds',
                        'type' => $this->getType('HelpfulChannelBirds'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'HelpfulChannelBirds'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readHighpitchedCommitteeYards',
                        'type' => $this->getType('readHighpitchedCommitteeYardsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'HighpitchedCommitteeYard'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneHighpitchedCommitteeYard',
                        'type' => $this->getType('HighpitchedCommitteeYard'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'HighpitchedCommitteeYard'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readHighpitchedRegretCakes',
                        'type' => $this->getType('readHighpitchedRegretCakesConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'HighpitchedRegretCake'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneHighpitchedRegretCake',
                        'type' => $this->getType('HighpitchedRegretCake'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'HighpitchedRegretCake'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readHistoricalSlips',
                        'type' => $this->getType('readHistoricalSlipsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'HistoricalSlip'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneHistoricalSlip',
                        'type' => $this->getType('HistoricalSlip'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'HistoricalSlip'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readHistoricalYards',
                        'type' => $this->getType('readHistoricalYardsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'HistoricalYard'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneHistoricalYard',
                        'type' => $this->getType('HistoricalYard'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'HistoricalYard'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readHobbiess',
                        'type' => $this->getType('readHobbiessConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'Hobbies'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneHobbies',
                        'type' => $this->getType('Hobbies'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'Hobbies'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readHolidays',
                        'type' => $this->getType('readHolidaysConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'Holiday'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneHoliday',
                        'type' => $this->getType('Holiday'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'Holiday'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readHolisticSmells',
                        'type' => $this->getType('readHolisticSmellsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'HolisticSmell'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneHolisticSmell',
                        'type' => $this->getType('HolisticSmell'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'HolisticSmell'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readHorribleSuits',
                        'type' => $this->getType('readHorribleSuitsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'HorribleSuit'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneHorribleSuit',
                        'type' => $this->getType('HorribleSuit'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'HorribleSuit'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readHospitals',
                        'type' => $this->getType('readHospitalsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'Hospital'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneHospital',
                        'type' => $this->getType('Hospital'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'Hospital'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readHypnoticControlDoctors',
                        'type' => $this->getType('readHypnoticControlDoctorsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'HypnoticControlDoctor'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneHypnoticControlDoctor',
                        'type' => $this->getType('HypnoticControlDoctor'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'HypnoticControlDoctor'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readIndustriousAdvertisements',
                        'type' => $this->getType('readIndustriousAdvertisementsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'IndustriousAdvertisement'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneIndustriousAdvertisement',
                        'type' => $this->getType('IndustriousAdvertisement'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'IndustriousAdvertisement'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readIndustriousGrandmotherUmbrellas',
                        'type' => $this->getType('readIndustriousGrandmotherUmbrellasConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'IndustriousGrandmotherUmbrella'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneIndustriousGrandmotherUmbrella',
                        'type' => $this->getType('IndustriousGrandmotherUmbrella'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'IndustriousGrandmotherUmbrella'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readJars',
                        'type' => $this->getType('readJarsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'Jar'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneJar',
                        'type' => $this->getType('Jar'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'Jar'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readJitteryUmbrellas',
                        'type' => $this->getType('readJitteryUmbrellasConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'JitteryUmbrella'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneJitteryUmbrella',
                        'type' => $this->getType('JitteryUmbrella'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'JitteryUmbrella'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readPages',
                        'type' => $this->getType('readPagesConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'Page'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOnePage',
                        'type' => $this->getType('Page'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'Page'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readSilverStripeSiteTrees',
                        'type' => $this->getType('readSilverStripeSiteTreesConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'SilverStripe\\CMS\\Model\\SiteTree'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneSilverStripeSiteTree',
                        'type' => $this->getType('SilverStripeSiteTree'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'SilverStripe\\CMS\\Model\\SiteTree'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readThoughtlessObservations',
                        'type' => $this->getType('readThoughtlessObservationsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'ThoughtlessObservation'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneThoughtlessObservation',
                        'type' => $this->getType('ThoughtlessObservation'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'ThoughtlessObservation'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readSheeps',
                        'type' => $this->getType('readSheepsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'Sheep'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneSheep',
                        'type' => $this->getType('Sheep'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'Sheep'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readTrades',
                        'type' => $this->getType('readTradesConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'Trade'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneTrade',
                        'type' => $this->getType('Trade'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'Trade'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readThoughtfulNeedCarss',
                        'type' => $this->getType('readThoughtfulNeedCarssConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'ThoughtfulNeedCars'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneThoughtfulNeedCars',
                        'type' => $this->getType('ThoughtfulNeedCars'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'ThoughtfulNeedCars'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readReconditeVolleyballMittens',
                        'type' => $this->getType('readReconditeVolleyballMittensConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'ReconditeVolleyballMitten'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneReconditeVolleyballMitten',
                        'type' => $this->getType('ReconditeVolleyballMitten'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'ReconditeVolleyballMitten'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readSupports',
                        'type' => $this->getType('readSupportsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'Support'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneSupport',
                        'type' => $this->getType('Support'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'Support'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readKeys',
                        'type' => $this->getType('readKeysConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'Key'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneKey',
                        'type' => $this->getType('Key'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'Key'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readMindlessSmokes',
                        'type' => $this->getType('readMindlessSmokesConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'MindlessSmoke'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneMindlessSmoke',
                        'type' => $this->getType('MindlessSmoke'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'MindlessSmoke'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readPanickyChickenss',
                        'type' => $this->getType('readPanickyChickenssConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'PanickyChickens'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOnePanickyChickens',
                        'type' => $this->getType('PanickyChickens'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'PanickyChickens'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readSpots',
                        'type' => $this->getType('readSpotsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'Spot'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneSpot',
                        'type' => $this->getType('Spot'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'Spot'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readYards',
                        'type' => $this->getType('readYardsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'Yard'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneYard',
                        'type' => $this->getType('Yard'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'Yard'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readReflectivePoints',
                        'type' => $this->getType('readReflectivePointsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'ReflectivePoint'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneReflectivePoint',
                        'type' => $this->getType('ReflectivePoint'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'ReflectivePoint'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readThoughtlessEnds',
                        'type' => $this->getType('readThoughtlessEndsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'ThoughtlessEnd'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneThoughtlessEnd',
                        'type' => $this->getType('ThoughtlessEnd'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'ThoughtlessEnd'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    ),
                    array(
                        'name' => 'readRubs',
                        'type' => $this->getType('readRubsConnection'),
                        'resolve' => SilverStripe\GraphQL\Resolvers\PaginationResolverFactory::create(array(
                            'parentResolver' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadResolverFactory::create(array('dataObjectClass' => 'Rub'))->createClosure(),
                            'defaultLimit' => 100,
                            'maximumLimit' => 100,
                            'sortableFields' => array()
                        ))->createClosure(),
                        'args' => array(
                            array('name' => 'limit', 'type' => GraphQL\Type\Definition\Type::int()),
                            array('name' => 'offset', 'type' => GraphQL\Type\Definition\Type::int())
                        )
                    ),
                    array(
                        'name' => 'readOneRub',
                        'type' => $this->getType('Rub'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\ReadOneResolverFactory::create(array('dataObjectClass' => 'Rub'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'ID',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::id())
                            )
                        )
                    )
                );
            }
        ));
    }

    private function Mutation()
    {
        return new \GraphQL\Type\Definition\ObjectType(array(
            'name' => 'Mutation',
            'fields' => function () {
                return array(
                    array(
                        'name' => 'updateAbrasiveCoatRange',
                        'type' => $this->getType('AbrasiveCoatRange'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'AbrasiveCoatRange'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('AbrasiveCoatRangeUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createAbrasiveCoatRange',
                        'type' => $this->getType('AbrasiveCoatRange'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'AbrasiveCoatRange'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('AbrasiveCoatRangeCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteAbrasiveCoatRange',
                        'type' => $this->getType('AbrasiveCoatRange'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'AbrasiveCoatRange'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateAbrasiveExchangeShade',
                        'type' => $this->getType('AbrasiveExchangeShade'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'AbrasiveExchangeShade'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('AbrasiveExchangeShadeUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createAbrasiveExchangeShade',
                        'type' => $this->getType('AbrasiveExchangeShade'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'AbrasiveExchangeShade'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('AbrasiveExchangeShadeCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteAbrasiveExchangeShade',
                        'type' => $this->getType('AbrasiveExchangeShade'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'AbrasiveExchangeShade'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateAbsentLadybug',
                        'type' => $this->getType('AbsentLadybug'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'AbsentLadybug'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('AbsentLadybugUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createAbsentLadybug',
                        'type' => $this->getType('AbsentLadybug'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'AbsentLadybug'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('AbsentLadybugCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteAbsentLadybug',
                        'type' => $this->getType('AbsentLadybug'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'AbsentLadybug'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateAbundantTiger',
                        'type' => $this->getType('AbundantTiger'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'AbundantTiger'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('AbundantTigerUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createAbundantTiger',
                        'type' => $this->getType('AbundantTiger'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'AbundantTiger'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('AbundantTigerCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteAbundantTiger',
                        'type' => $this->getType('AbundantTiger'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'AbundantTiger'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateActuallyMittenActivity',
                        'type' => $this->getType('ActuallyMittenActivity'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'ActuallyMittenActivity'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ActuallyMittenActivityUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createActuallyMittenActivity',
                        'type' => $this->getType('ActuallyMittenActivity'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'ActuallyMittenActivity'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ActuallyMittenActivityCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteActuallyMittenActivity',
                        'type' => $this->getType('ActuallyMittenActivity'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'ActuallyMittenActivity'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateAdvertisement',
                        'type' => $this->getType('Advertisement'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'Advertisement'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('AdvertisementUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createAdvertisement',
                        'type' => $this->getType('Advertisement'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'Advertisement'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('AdvertisementCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteAdvertisement',
                        'type' => $this->getType('Advertisement'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'Advertisement'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateAggressiveStretchPigs',
                        'type' => $this->getType('AggressiveStretchPigs'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'AggressiveStretchPigs'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('AggressiveStretchPigsUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createAggressiveStretchPigs',
                        'type' => $this->getType('AggressiveStretchPigs'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'AggressiveStretchPigs'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('AggressiveStretchPigsCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteAggressiveStretchPigs',
                        'type' => $this->getType('AggressiveStretchPigs'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'AggressiveStretchPigs'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateAgreement',
                        'type' => $this->getType('Agreement'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'Agreement'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('AgreementUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createAgreement',
                        'type' => $this->getType('Agreement'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'Agreement'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('AgreementCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteAgreement',
                        'type' => $this->getType('Agreement'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'Agreement'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateAheadFairiesBridge',
                        'type' => $this->getType('AheadFairiesBridge'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'AheadFairiesBridge'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('AheadFairiesBridgeUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createAheadFairiesBridge',
                        'type' => $this->getType('AheadFairiesBridge'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'AheadFairiesBridge'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('AheadFairiesBridgeCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteAheadFairiesBridge',
                        'type' => $this->getType('AheadFairiesBridge'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'AheadFairiesBridge'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateAheadFriend',
                        'type' => $this->getType('AheadFriend'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'AheadFriend'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('AheadFriendUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createAheadFriend',
                        'type' => $this->getType('AheadFriend'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'AheadFriend'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('AheadFriendCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteAheadFriend',
                        'type' => $this->getType('AheadFriend'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'AheadFriend'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateAlikeSheep',
                        'type' => $this->getType('AlikeSheep'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'AlikeSheep'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('AlikeSheepUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createAlikeSheep',
                        'type' => $this->getType('AlikeSheep'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'AlikeSheep'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('AlikeSheepCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteAlikeSheep',
                        'type' => $this->getType('AlikeSheep'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'AlikeSheep'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateAlikeSwing',
                        'type' => $this->getType('AlikeSwing'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'AlikeSwing'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('AlikeSwingUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createAlikeSwing',
                        'type' => $this->getType('AlikeSwing'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'AlikeSwing'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('AlikeSwingCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteAlikeSwing',
                        'type' => $this->getType('AlikeSwing'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'AlikeSwing'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateAmbiguousDuck',
                        'type' => $this->getType('AmbiguousDuck'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'AmbiguousDuck'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('AmbiguousDuckUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createAmbiguousDuck',
                        'type' => $this->getType('AmbiguousDuck'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'AmbiguousDuck'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('AmbiguousDuckCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteAmbiguousDuck',
                        'type' => $this->getType('AmbiguousDuck'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'AmbiguousDuck'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateAngle',
                        'type' => $this->getType('Angle'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'Angle'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('AngleUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createAngle',
                        'type' => $this->getType('Angle'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'Angle'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('AngleCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteAngle',
                        'type' => $this->getType('Angle'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'Angle'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateAttractiveQuietHospital',
                        'type' => $this->getType('AttractiveQuietHospital'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'AttractiveQuietHospital'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('AttractiveQuietHospitalUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createAttractiveQuietHospital',
                        'type' => $this->getType('AttractiveQuietHospital'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'AttractiveQuietHospital'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('AttractiveQuietHospitalCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteAttractiveQuietHospital',
                        'type' => $this->getType('AttractiveQuietHospital'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'AttractiveQuietHospital'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateBaby',
                        'type' => $this->getType('Baby'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'Baby'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('BabyUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createBaby',
                        'type' => $this->getType('Baby'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'Baby'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('BabyCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteBaby',
                        'type' => $this->getType('Baby'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'Baby'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateBadge',
                        'type' => $this->getType('Badge'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'Badge'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('BadgeUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createBadge',
                        'type' => $this->getType('Badge'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'Badge'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('BadgeCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteBadge',
                        'type' => $this->getType('Badge'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'Badge'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateBells',
                        'type' => $this->getType('Bells'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'Bells'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('BellsUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createBells',
                        'type' => $this->getType('Bells'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'Bells'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('BellsCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteBells',
                        'type' => $this->getType('Bells'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'Bells'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateBerserkQuestion',
                        'type' => $this->getType('BerserkQuestion'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'BerserkQuestion'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('BerserkQuestionUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createBerserkQuestion',
                        'type' => $this->getType('BerserkQuestion'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'BerserkQuestion'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('BerserkQuestionCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteBerserkQuestion',
                        'type' => $this->getType('BerserkQuestion'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'BerserkQuestion'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateBoot',
                        'type' => $this->getType('Boot'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'Boot'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('BootUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createBoot',
                        'type' => $this->getType('Boot'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'Boot'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('BootCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteBoot',
                        'type' => $this->getType('Boot'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'Boot'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateBoundlessDoctorBead',
                        'type' => $this->getType('BoundlessDoctorBead'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'BoundlessDoctorBead'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('BoundlessDoctorBeadUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createBoundlessDoctorBead',
                        'type' => $this->getType('BoundlessDoctorBead'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'BoundlessDoctorBead'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('BoundlessDoctorBeadCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteBoundlessDoctorBead',
                        'type' => $this->getType('BoundlessDoctorBead'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'BoundlessDoctorBead'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateBridge',
                        'type' => $this->getType('Bridge'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'Bridge'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('BridgeUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createBridge',
                        'type' => $this->getType('Bridge'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'Bridge'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('BridgeCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteBridge',
                        'type' => $this->getType('Bridge'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'Bridge'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateBriefSparkHospital',
                        'type' => $this->getType('BriefSparkHospital'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'BriefSparkHospital'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('BriefSparkHospitalUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createBriefSparkHospital',
                        'type' => $this->getType('BriefSparkHospital'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'BriefSparkHospital'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('BriefSparkHospitalCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteBriefSparkHospital',
                        'type' => $this->getType('BriefSparkHospital'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'BriefSparkHospital'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateBrightSofa',
                        'type' => $this->getType('BrightSofa'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'BrightSofa'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('BrightSofaUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createBrightSofa',
                        'type' => $this->getType('BrightSofa'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'BrightSofa'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('BrightSofaCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteBrightSofa',
                        'type' => $this->getType('BrightSofa'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'BrightSofa'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateBulb',
                        'type' => $this->getType('Bulb'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'Bulb'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('BulbUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createBulb',
                        'type' => $this->getType('Bulb'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'Bulb'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('BulbCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteBulb',
                        'type' => $this->getType('Bulb'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'Bulb'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateBumpyCave',
                        'type' => $this->getType('BumpyCave'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'BumpyCave'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('BumpyCaveUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createBumpyCave',
                        'type' => $this->getType('BumpyCave'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'BumpyCave'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('BumpyCaveCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteBumpyCave',
                        'type' => $this->getType('BumpyCave'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'BumpyCave'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateCake',
                        'type' => $this->getType('Cake'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'Cake'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('CakeUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createCake',
                        'type' => $this->getType('Cake'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'Cake'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('CakeCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteCake',
                        'type' => $this->getType('Cake'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'Cake'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateCakes',
                        'type' => $this->getType('Cakes'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'Cakes'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('CakesUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createCakes',
                        'type' => $this->getType('Cakes'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'Cakes'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('CakesCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteCakes',
                        'type' => $this->getType('Cakes'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'Cakes'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateCapriciousTitle',
                        'type' => $this->getType('CapriciousTitle'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'CapriciousTitle'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('CapriciousTitleUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createCapriciousTitle',
                        'type' => $this->getType('CapriciousTitle'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'CapriciousTitle'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('CapriciousTitleCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteCapriciousTitle',
                        'type' => $this->getType('CapriciousTitle'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'CapriciousTitle'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateCars',
                        'type' => $this->getType('Cars'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'Cars'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('CarsUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createCars',
                        'type' => $this->getType('Cars'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'Cars'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('CarsCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteCars',
                        'type' => $this->getType('Cars'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'Cars'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateCast',
                        'type' => $this->getType('Cast'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'Cast'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('CastUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createCast',
                        'type' => $this->getType('Cast'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'Cast'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('CastCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteCast',
                        'type' => $this->getType('Cast'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'Cast'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateCave',
                        'type' => $this->getType('Cave'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'Cave'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('CaveUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createCave',
                        'type' => $this->getType('Cave'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'Cave'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('CaveCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteCave',
                        'type' => $this->getType('Cave'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'Cave'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateCeaselessBoard',
                        'type' => $this->getType('CeaselessBoard'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'CeaselessBoard'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('CeaselessBoardUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createCeaselessBoard',
                        'type' => $this->getType('CeaselessBoard'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'CeaselessBoard'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('CeaselessBoardCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteCeaselessBoard',
                        'type' => $this->getType('CeaselessBoard'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'CeaselessBoard'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateCeaselessKittens',
                        'type' => $this->getType('CeaselessKittens'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'CeaselessKittens'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('CeaselessKittensUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createCeaselessKittens',
                        'type' => $this->getType('CeaselessKittens'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'CeaselessKittens'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('CeaselessKittensCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteCeaselessKittens',
                        'type' => $this->getType('CeaselessKittens'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'CeaselessKittens'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateChannel',
                        'type' => $this->getType('Channel'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'Channel'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ChannelUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createChannel',
                        'type' => $this->getType('Channel'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'Channel'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ChannelCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteChannel',
                        'type' => $this->getType('Channel'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'Channel'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateChickens',
                        'type' => $this->getType('Chickens'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'Chickens'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ChickensUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createChickens',
                        'type' => $this->getType('Chickens'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'Chickens'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ChickensCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteChickens',
                        'type' => $this->getType('Chickens'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'Chickens'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateCoast',
                        'type' => $this->getType('Coast'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'Coast'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('CoastUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createCoast',
                        'type' => $this->getType('Coast'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'Coast'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('CoastCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteCoast',
                        'type' => $this->getType('Coast'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'Coast'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateCoherentCaveReligion',
                        'type' => $this->getType('CoherentCaveReligion'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'CoherentCaveReligion'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('CoherentCaveReligionUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createCoherentCaveReligion',
                        'type' => $this->getType('CoherentCaveReligion'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'CoherentCaveReligion'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('CoherentCaveReligionCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteCoherentCaveReligion',
                        'type' => $this->getType('CoherentCaveReligion'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'CoherentCaveReligion'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateCommittee',
                        'type' => $this->getType('Committee'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'Committee'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('CommitteeUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createCommittee',
                        'type' => $this->getType('Committee'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'Committee'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('CommitteeCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteCommittee',
                        'type' => $this->getType('Committee'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'Committee'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateCooperativeExistenceNight',
                        'type' => $this->getType('CooperativeExistenceNight'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'CooperativeExistenceNight'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('CooperativeExistenceNightUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createCooperativeExistenceNight',
                        'type' => $this->getType('CooperativeExistenceNight'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'CooperativeExistenceNight'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('CooperativeExistenceNightCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteCooperativeExistenceNight',
                        'type' => $this->getType('CooperativeExistenceNight'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'CooperativeExistenceNight'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateCravenStomachAdjustment',
                        'type' => $this->getType('CravenStomachAdjustment'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'CravenStomachAdjustment'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('CravenStomachAdjustmentUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createCravenStomachAdjustment',
                        'type' => $this->getType('CravenStomachAdjustment'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'CravenStomachAdjustment'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('CravenStomachAdjustmentCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteCravenStomachAdjustment',
                        'type' => $this->getType('CravenStomachAdjustment'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'CravenStomachAdjustment'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateCrib',
                        'type' => $this->getType('Crib'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'Crib'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('CribUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createCrib',
                        'type' => $this->getType('Crib'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'Crib'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('CribCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteCrib',
                        'type' => $this->getType('Crib'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'Crib'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateCuddlyBoard',
                        'type' => $this->getType('CuddlyBoard'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'CuddlyBoard'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('CuddlyBoardUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createCuddlyBoard',
                        'type' => $this->getType('CuddlyBoard'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'CuddlyBoard'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('CuddlyBoardCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteCuddlyBoard',
                        'type' => $this->getType('CuddlyBoard'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'CuddlyBoard'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateCuriousSparkThread',
                        'type' => $this->getType('CuriousSparkThread'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'CuriousSparkThread'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('CuriousSparkThreadUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createCuriousSparkThread',
                        'type' => $this->getType('CuriousSparkThread'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'CuriousSparkThread'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('CuriousSparkThreadCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteCuriousSparkThread',
                        'type' => $this->getType('CuriousSparkThread'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'CuriousSparkThread'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateCurvedPlace',
                        'type' => $this->getType('CurvedPlace'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'CurvedPlace'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('CurvedPlaceUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createCurvedPlace',
                        'type' => $this->getType('CurvedPlace'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'CurvedPlace'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('CurvedPlaceCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteCurvedPlace',
                        'type' => $this->getType('CurvedPlace'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'CurvedPlace'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateCurvedSheepNeed',
                        'type' => $this->getType('CurvedSheepNeed'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'CurvedSheepNeed'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('CurvedSheepNeedUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createCurvedSheepNeed',
                        'type' => $this->getType('CurvedSheepNeed'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'CurvedSheepNeed'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('CurvedSheepNeedCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteCurvedSheepNeed',
                        'type' => $this->getType('CurvedSheepNeed'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'CurvedSheepNeed'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateCurvedWashTop',
                        'type' => $this->getType('CurvedWashTop'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'CurvedWashTop'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('CurvedWashTopUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createCurvedWashTop',
                        'type' => $this->getType('CurvedWashTop'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'CurvedWashTop'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('CurvedWashTopCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteCurvedWashTop',
                        'type' => $this->getType('CurvedWashTop'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'CurvedWashTop'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateCushion',
                        'type' => $this->getType('Cushion'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'Cushion'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('CushionUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createCushion',
                        'type' => $this->getType('Cushion'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'Cushion'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('CushionCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteCushion',
                        'type' => $this->getType('Cushion'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'Cushion'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateCutEffectBoard',
                        'type' => $this->getType('CutEffectBoard'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'CutEffectBoard'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('CutEffectBoardUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createCutEffectBoard',
                        'type' => $this->getType('CutEffectBoard'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'CutEffectBoard'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('CutEffectBoardCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteCutEffectBoard',
                        'type' => $this->getType('CutEffectBoard'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'CutEffectBoard'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateCutShade',
                        'type' => $this->getType('CutShade'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'CutShade'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('CutShadeUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createCutShade',
                        'type' => $this->getType('CutShade'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'CutShade'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('CutShadeCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteCutShade',
                        'type' => $this->getType('CutShade'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'CutShade'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateDinosaurs',
                        'type' => $this->getType('Dinosaurs'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'Dinosaurs'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('DinosaursUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createDinosaurs',
                        'type' => $this->getType('Dinosaurs'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'Dinosaurs'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('DinosaursCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteDinosaurs',
                        'type' => $this->getType('Dinosaurs'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'Dinosaurs'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateDisagreeableBeef',
                        'type' => $this->getType('DisagreeableBeef'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'DisagreeableBeef'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('DisagreeableBeefUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createDisagreeableBeef',
                        'type' => $this->getType('DisagreeableBeef'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'DisagreeableBeef'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('DisagreeableBeefCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteDisagreeableBeef',
                        'type' => $this->getType('DisagreeableBeef'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'DisagreeableBeef'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateDispensableAftermath',
                        'type' => $this->getType('DispensableAftermath'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'DispensableAftermath'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('DispensableAftermathUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createDispensableAftermath',
                        'type' => $this->getType('DispensableAftermath'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'DispensableAftermath'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('DispensableAftermathCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteDispensableAftermath',
                        'type' => $this->getType('DispensableAftermath'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'DispensableAftermath'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateDisturbedShow',
                        'type' => $this->getType('DisturbedShow'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'DisturbedShow'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('DisturbedShowUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createDisturbedShow',
                        'type' => $this->getType('DisturbedShow'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'DisturbedShow'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('DisturbedShowCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteDisturbedShow',
                        'type' => $this->getType('DisturbedShow'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'DisturbedShow'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateDoctor',
                        'type' => $this->getType('Doctor'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'Doctor'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('DoctorUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createDoctor',
                        'type' => $this->getType('Doctor'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'Doctor'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('DoctorCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteDoctor',
                        'type' => $this->getType('Doctor'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'Doctor'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateDrop',
                        'type' => $this->getType('Drop'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'Drop'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('DropUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createDrop',
                        'type' => $this->getType('Drop'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'Drop'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('DropCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteDrop',
                        'type' => $this->getType('Drop'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'Drop'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateDucks',
                        'type' => $this->getType('Ducks'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'Ducks'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('DucksUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createDucks',
                        'type' => $this->getType('Ducks'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'Ducks'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('DucksCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteDucks',
                        'type' => $this->getType('Ducks'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'Ducks'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateDustyGhostNight',
                        'type' => $this->getType('DustyGhostNight'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'DustyGhostNight'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('DustyGhostNightUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createDustyGhostNight',
                        'type' => $this->getType('DustyGhostNight'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'DustyGhostNight'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('DustyGhostNightCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteDustyGhostNight',
                        'type' => $this->getType('DustyGhostNight'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'DustyGhostNight'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateEagerHill',
                        'type' => $this->getType('EagerHill'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'EagerHill'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('EagerHillUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createEagerHill',
                        'type' => $this->getType('EagerHill'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'EagerHill'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('EagerHillCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteEagerHill',
                        'type' => $this->getType('EagerHill'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'EagerHill'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateEfficaciousTreesHat',
                        'type' => $this->getType('EfficaciousTreesHat'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'EfficaciousTreesHat'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('EfficaciousTreesHatUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createEfficaciousTreesHat',
                        'type' => $this->getType('EfficaciousTreesHat'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'EfficaciousTreesHat'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('EfficaciousTreesHatCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteEfficaciousTreesHat',
                        'type' => $this->getType('EfficaciousTreesHat'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'EfficaciousTreesHat'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateEliteCrib',
                        'type' => $this->getType('EliteCrib'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'EliteCrib'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('EliteCribUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createEliteCrib',
                        'type' => $this->getType('EliteCrib'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'EliteCrib'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('EliteCribCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteEliteCrib',
                        'type' => $this->getType('EliteCrib'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'EliteCrib'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateEliteKittensNight',
                        'type' => $this->getType('EliteKittensNight'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'EliteKittensNight'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('EliteKittensNightUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createEliteKittensNight',
                        'type' => $this->getType('EliteKittensNight'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'EliteKittensNight'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('EliteKittensNightCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteEliteKittensNight',
                        'type' => $this->getType('EliteKittensNight'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'EliteKittensNight'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateErectAftermathJudge',
                        'type' => $this->getType('ErectAftermathJudge'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'ErectAftermathJudge'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ErectAftermathJudgeUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createErectAftermathJudge',
                        'type' => $this->getType('ErectAftermathJudge'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'ErectAftermathJudge'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ErectAftermathJudgeCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteErectAftermathJudge',
                        'type' => $this->getType('ErectAftermathJudge'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'ErectAftermathJudge'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateErectWheelAftermath',
                        'type' => $this->getType('ErectWheelAftermath'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'ErectWheelAftermath'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ErectWheelAftermathUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createErectWheelAftermath',
                        'type' => $this->getType('ErectWheelAftermath'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'ErectWheelAftermath'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ErectWheelAftermathCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteErectWheelAftermath',
                        'type' => $this->getType('ErectWheelAftermath'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'ErectWheelAftermath'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateEtherealLossSpark',
                        'type' => $this->getType('EtherealLossSpark'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'EtherealLossSpark'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('EtherealLossSparkUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createEtherealLossSpark',
                        'type' => $this->getType('EtherealLossSpark'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'EtherealLossSpark'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('EtherealLossSparkCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteEtherealLossSpark',
                        'type' => $this->getType('EtherealLossSpark'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'EtherealLossSpark'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateEtherealPlaceRoad',
                        'type' => $this->getType('EtherealPlaceRoad'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'EtherealPlaceRoad'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('EtherealPlaceRoadUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createEtherealPlaceRoad',
                        'type' => $this->getType('EtherealPlaceRoad'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'EtherealPlaceRoad'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('EtherealPlaceRoadCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteEtherealPlaceRoad',
                        'type' => $this->getType('EtherealPlaceRoad'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'EtherealPlaceRoad'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateFact',
                        'type' => $this->getType('Fact'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'Fact'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('FactUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createFact',
                        'type' => $this->getType('Fact'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'Fact'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('FactCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteFact',
                        'type' => $this->getType('Fact'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'Fact'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateFamiliarReligion',
                        'type' => $this->getType('FamiliarReligion'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'FamiliarReligion'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('FamiliarReligionUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createFamiliarReligion',
                        'type' => $this->getType('FamiliarReligion'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'FamiliarReligion'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('FamiliarReligionCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteFamiliarReligion',
                        'type' => $this->getType('FamiliarReligion'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'FamiliarReligion'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateFarflungChickensLegs',
                        'type' => $this->getType('FarflungChickensLegs'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'FarflungChickensLegs'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('FarflungChickensLegsUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createFarflungChickensLegs',
                        'type' => $this->getType('FarflungChickensLegs'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'FarflungChickensLegs'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('FarflungChickensLegsCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteFarflungChickensLegs',
                        'type' => $this->getType('FarflungChickensLegs'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'FarflungChickensLegs'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateFeeling',
                        'type' => $this->getType('Feeling'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'Feeling'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('FeelingUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createFeeling',
                        'type' => $this->getType('Feeling'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'Feeling'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('FeelingCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteFeeling',
                        'type' => $this->getType('Feeling'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'Feeling'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateFierceBridgeBeef',
                        'type' => $this->getType('FierceBridgeBeef'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'FierceBridgeBeef'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('FierceBridgeBeefUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createFierceBridgeBeef',
                        'type' => $this->getType('FierceBridgeBeef'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'FierceBridgeBeef'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('FierceBridgeBeefCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteFierceBridgeBeef',
                        'type' => $this->getType('FierceBridgeBeef'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'FierceBridgeBeef'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateFierceBulb',
                        'type' => $this->getType('FierceBulb'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'FierceBulb'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('FierceBulbUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createFierceBulb',
                        'type' => $this->getType('FierceBulb'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'FierceBulb'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('FierceBulbCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteFierceBulb',
                        'type' => $this->getType('FierceBulb'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'FierceBulb'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateFierceGrandmotherThread',
                        'type' => $this->getType('FierceGrandmotherThread'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'FierceGrandmotherThread'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('FierceGrandmotherThreadUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createFierceGrandmotherThread',
                        'type' => $this->getType('FierceGrandmotherThread'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'FierceGrandmotherThread'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('FierceGrandmotherThreadCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteFierceGrandmotherThread',
                        'type' => $this->getType('FierceGrandmotherThread'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'FierceGrandmotherThread'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateFierceWool',
                        'type' => $this->getType('FierceWool'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'FierceWool'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('FierceWoolUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createFierceWool',
                        'type' => $this->getType('FierceWool'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'FierceWool'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('FierceWoolCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteFierceWool',
                        'type' => $this->getType('FierceWool'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'FierceWool'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateFineBasket',
                        'type' => $this->getType('FineBasket'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'FineBasket'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('FineBasketUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createFineBasket',
                        'type' => $this->getType('FineBasket'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'FineBasket'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('FineBasketCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteFineBasket',
                        'type' => $this->getType('FineBasket'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'FineBasket'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateFineSleep',
                        'type' => $this->getType('FineSleep'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'FineSleep'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('FineSleepUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createFineSleep',
                        'type' => $this->getType('FineSleep'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'FineSleep'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('FineSleepCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteFineSleep',
                        'type' => $this->getType('FineSleep'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'FineSleep'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateFunctionalDirt',
                        'type' => $this->getType('FunctionalDirt'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'FunctionalDirt'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('FunctionalDirtUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createFunctionalDirt',
                        'type' => $this->getType('FunctionalDirt'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'FunctionalDirt'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('FunctionalDirtCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteFunctionalDirt',
                        'type' => $this->getType('FunctionalDirt'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'FunctionalDirt'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateGlisteningDropRoom',
                        'type' => $this->getType('GlisteningDropRoom'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'GlisteningDropRoom'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('GlisteningDropRoomUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createGlisteningDropRoom',
                        'type' => $this->getType('GlisteningDropRoom'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'GlisteningDropRoom'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('GlisteningDropRoomCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteGlisteningDropRoom',
                        'type' => $this->getType('GlisteningDropRoom'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'GlisteningDropRoom'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateGrip',
                        'type' => $this->getType('Grip'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'Grip'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('GripUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createGrip',
                        'type' => $this->getType('Grip'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'Grip'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('GripCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteGrip',
                        'type' => $this->getType('Grip'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'Grip'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateGrotesqueJail',
                        'type' => $this->getType('GrotesqueJail'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'GrotesqueJail'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('GrotesqueJailUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createGrotesqueJail',
                        'type' => $this->getType('GrotesqueJail'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'GrotesqueJail'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('GrotesqueJailCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteGrotesqueJail',
                        'type' => $this->getType('GrotesqueJail'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'GrotesqueJail'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateHaircut',
                        'type' => $this->getType('Haircut'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'Haircut'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('HaircutUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createHaircut',
                        'type' => $this->getType('Haircut'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'Haircut'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('HaircutCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteHaircut',
                        'type' => $this->getType('Haircut'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'Haircut'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateHappyAirplaneSwing',
                        'type' => $this->getType('HappyAirplaneSwing'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'HappyAirplaneSwing'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('HappyAirplaneSwingUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createHappyAirplaneSwing',
                        'type' => $this->getType('HappyAirplaneSwing'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'HappyAirplaneSwing'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('HappyAirplaneSwingCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteHappyAirplaneSwing',
                        'type' => $this->getType('HappyAirplaneSwing'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'HappyAirplaneSwing'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateHappyMoveReason',
                        'type' => $this->getType('HappyMoveReason'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'HappyMoveReason'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('HappyMoveReasonUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createHappyMoveReason',
                        'type' => $this->getType('HappyMoveReason'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'HappyMoveReason'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('HappyMoveReasonCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteHappyMoveReason',
                        'type' => $this->getType('HappyMoveReason'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'HappyMoveReason'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateHeavyDucksChannel',
                        'type' => $this->getType('HeavyDucksChannel'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'HeavyDucksChannel'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('HeavyDucksChannelUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createHeavyDucksChannel',
                        'type' => $this->getType('HeavyDucksChannel'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'HeavyDucksChannel'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('HeavyDucksChannelCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteHeavyDucksChannel',
                        'type' => $this->getType('HeavyDucksChannel'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'HeavyDucksChannel'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateHelpfulAgreement',
                        'type' => $this->getType('HelpfulAgreement'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'HelpfulAgreement'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('HelpfulAgreementUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createHelpfulAgreement',
                        'type' => $this->getType('HelpfulAgreement'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'HelpfulAgreement'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('HelpfulAgreementCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteHelpfulAgreement',
                        'type' => $this->getType('HelpfulAgreement'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'HelpfulAgreement'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateHelpfulChannelBirds',
                        'type' => $this->getType('HelpfulChannelBirds'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'HelpfulChannelBirds'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('HelpfulChannelBirdsUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createHelpfulChannelBirds',
                        'type' => $this->getType('HelpfulChannelBirds'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'HelpfulChannelBirds'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('HelpfulChannelBirdsCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteHelpfulChannelBirds',
                        'type' => $this->getType('HelpfulChannelBirds'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'HelpfulChannelBirds'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateHighpitchedCommitteeYard',
                        'type' => $this->getType('HighpitchedCommitteeYard'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'HighpitchedCommitteeYard'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('HighpitchedCommitteeYardUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createHighpitchedCommitteeYard',
                        'type' => $this->getType('HighpitchedCommitteeYard'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'HighpitchedCommitteeYard'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('HighpitchedCommitteeYardCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteHighpitchedCommitteeYard',
                        'type' => $this->getType('HighpitchedCommitteeYard'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'HighpitchedCommitteeYard'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateHighpitchedRegretCake',
                        'type' => $this->getType('HighpitchedRegretCake'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'HighpitchedRegretCake'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('HighpitchedRegretCakeUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createHighpitchedRegretCake',
                        'type' => $this->getType('HighpitchedRegretCake'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'HighpitchedRegretCake'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('HighpitchedRegretCakeCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteHighpitchedRegretCake',
                        'type' => $this->getType('HighpitchedRegretCake'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'HighpitchedRegretCake'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateHistoricalSlip',
                        'type' => $this->getType('HistoricalSlip'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'HistoricalSlip'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('HistoricalSlipUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createHistoricalSlip',
                        'type' => $this->getType('HistoricalSlip'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'HistoricalSlip'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('HistoricalSlipCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteHistoricalSlip',
                        'type' => $this->getType('HistoricalSlip'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'HistoricalSlip'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateHistoricalYard',
                        'type' => $this->getType('HistoricalYard'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'HistoricalYard'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('HistoricalYardUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createHistoricalYard',
                        'type' => $this->getType('HistoricalYard'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'HistoricalYard'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('HistoricalYardCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteHistoricalYard',
                        'type' => $this->getType('HistoricalYard'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'HistoricalYard'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateHobbies',
                        'type' => $this->getType('Hobbies'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'Hobbies'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('HobbiesUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createHobbies',
                        'type' => $this->getType('Hobbies'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'Hobbies'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('HobbiesCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteHobbies',
                        'type' => $this->getType('Hobbies'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'Hobbies'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateHoliday',
                        'type' => $this->getType('Holiday'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'Holiday'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('HolidayUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createHoliday',
                        'type' => $this->getType('Holiday'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'Holiday'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('HolidayCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteHoliday',
                        'type' => $this->getType('Holiday'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'Holiday'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateHolisticSmell',
                        'type' => $this->getType('HolisticSmell'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'HolisticSmell'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('HolisticSmellUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createHolisticSmell',
                        'type' => $this->getType('HolisticSmell'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'HolisticSmell'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('HolisticSmellCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteHolisticSmell',
                        'type' => $this->getType('HolisticSmell'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'HolisticSmell'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateHorribleSuit',
                        'type' => $this->getType('HorribleSuit'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'HorribleSuit'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('HorribleSuitUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createHorribleSuit',
                        'type' => $this->getType('HorribleSuit'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'HorribleSuit'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('HorribleSuitCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteHorribleSuit',
                        'type' => $this->getType('HorribleSuit'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'HorribleSuit'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateHospital',
                        'type' => $this->getType('Hospital'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'Hospital'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('HospitalUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createHospital',
                        'type' => $this->getType('Hospital'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'Hospital'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('HospitalCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteHospital',
                        'type' => $this->getType('Hospital'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'Hospital'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateHypnoticControlDoctor',
                        'type' => $this->getType('HypnoticControlDoctor'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'HypnoticControlDoctor'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('HypnoticControlDoctorUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createHypnoticControlDoctor',
                        'type' => $this->getType('HypnoticControlDoctor'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'HypnoticControlDoctor'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('HypnoticControlDoctorCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteHypnoticControlDoctor',
                        'type' => $this->getType('HypnoticControlDoctor'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'HypnoticControlDoctor'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateIndustriousAdvertisement',
                        'type' => $this->getType('IndustriousAdvertisement'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'IndustriousAdvertisement'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('IndustriousAdvertisementUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createIndustriousAdvertisement',
                        'type' => $this->getType('IndustriousAdvertisement'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'IndustriousAdvertisement'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('IndustriousAdvertisementCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteIndustriousAdvertisement',
                        'type' => $this->getType('IndustriousAdvertisement'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'IndustriousAdvertisement'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateIndustriousGrandmotherUmbrella',
                        'type' => $this->getType('IndustriousGrandmotherUmbrella'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'IndustriousGrandmotherUmbrella'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('IndustriousGrandmotherUmbrellaUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createIndustriousGrandmotherUmbrella',
                        'type' => $this->getType('IndustriousGrandmotherUmbrella'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'IndustriousGrandmotherUmbrella'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('IndustriousGrandmotherUmbrellaCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteIndustriousGrandmotherUmbrella',
                        'type' => $this->getType('IndustriousGrandmotherUmbrella'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'IndustriousGrandmotherUmbrella'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateJar',
                        'type' => $this->getType('Jar'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'Jar'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('JarUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createJar',
                        'type' => $this->getType('Jar'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'Jar'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('JarCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteJar',
                        'type' => $this->getType('Jar'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'Jar'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateJitteryUmbrella',
                        'type' => $this->getType('JitteryUmbrella'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'JitteryUmbrella'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('JitteryUmbrellaUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createJitteryUmbrella',
                        'type' => $this->getType('JitteryUmbrella'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'JitteryUmbrella'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('JitteryUmbrellaCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteJitteryUmbrella',
                        'type' => $this->getType('JitteryUmbrella'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'JitteryUmbrella'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updatePage',
                        'type' => $this->getType('Page'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'Page'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createPage',
                        'type' => $this->getType('Page'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'Page'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PageCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deletePage',
                        'type' => $this->getType('Page'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'Page'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateSilverStripeSiteTree',
                        'type' => $this->getType('SilverStripeSiteTree'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'SilverStripe\\CMS\\Model\\SiteTree'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('SilverStripeSiteTreeUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createSilverStripeSiteTree',
                        'type' => $this->getType('SilverStripeSiteTree'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'SilverStripe\\CMS\\Model\\SiteTree'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('SilverStripeSiteTreeCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteSilverStripeSiteTree',
                        'type' => $this->getType('SilverStripeSiteTree'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'SilverStripe\\CMS\\Model\\SiteTree'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateThoughtlessObservation',
                        'type' => $this->getType('ThoughtlessObservation'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'ThoughtlessObservation'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ThoughtlessObservationUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createThoughtlessObservation',
                        'type' => $this->getType('ThoughtlessObservation'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'ThoughtlessObservation'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ThoughtlessObservationCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteThoughtlessObservation',
                        'type' => $this->getType('ThoughtlessObservation'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'ThoughtlessObservation'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateSheep',
                        'type' => $this->getType('Sheep'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'Sheep'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('SheepUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createSheep',
                        'type' => $this->getType('Sheep'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'Sheep'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('SheepCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteSheep',
                        'type' => $this->getType('Sheep'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'Sheep'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateTrade',
                        'type' => $this->getType('Trade'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'Trade'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('TradeUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createTrade',
                        'type' => $this->getType('Trade'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'Trade'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('TradeCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteTrade',
                        'type' => $this->getType('Trade'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'Trade'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateThoughtfulNeedCars',
                        'type' => $this->getType('ThoughtfulNeedCars'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'ThoughtfulNeedCars'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ThoughtfulNeedCarsUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createThoughtfulNeedCars',
                        'type' => $this->getType('ThoughtfulNeedCars'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'ThoughtfulNeedCars'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ThoughtfulNeedCarsCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteThoughtfulNeedCars',
                        'type' => $this->getType('ThoughtfulNeedCars'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'ThoughtfulNeedCars'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateReconditeVolleyballMitten',
                        'type' => $this->getType('ReconditeVolleyballMitten'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'ReconditeVolleyballMitten'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReconditeVolleyballMittenUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createReconditeVolleyballMitten',
                        'type' => $this->getType('ReconditeVolleyballMitten'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'ReconditeVolleyballMitten'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReconditeVolleyballMittenCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteReconditeVolleyballMitten',
                        'type' => $this->getType('ReconditeVolleyballMitten'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'ReconditeVolleyballMitten'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateSupport',
                        'type' => $this->getType('Support'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'Support'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('SupportUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createSupport',
                        'type' => $this->getType('Support'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'Support'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('SupportCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteSupport',
                        'type' => $this->getType('Support'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'Support'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateKey',
                        'type' => $this->getType('Key'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'Key'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('KeyUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createKey',
                        'type' => $this->getType('Key'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'Key'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('KeyCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteKey',
                        'type' => $this->getType('Key'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'Key'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateMindlessSmoke',
                        'type' => $this->getType('MindlessSmoke'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'MindlessSmoke'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('MindlessSmokeUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createMindlessSmoke',
                        'type' => $this->getType('MindlessSmoke'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'MindlessSmoke'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('MindlessSmokeCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteMindlessSmoke',
                        'type' => $this->getType('MindlessSmoke'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'MindlessSmoke'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updatePanickyChickens',
                        'type' => $this->getType('PanickyChickens'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'PanickyChickens'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PanickyChickensUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createPanickyChickens',
                        'type' => $this->getType('PanickyChickens'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'PanickyChickens'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('PanickyChickensCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deletePanickyChickens',
                        'type' => $this->getType('PanickyChickens'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'PanickyChickens'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateSpot',
                        'type' => $this->getType('Spot'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'Spot'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('SpotUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createSpot',
                        'type' => $this->getType('Spot'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'Spot'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('SpotCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteSpot',
                        'type' => $this->getType('Spot'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'Spot'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateYard',
                        'type' => $this->getType('Yard'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'Yard'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('YardUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createYard',
                        'type' => $this->getType('Yard'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'Yard'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('YardCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteYard',
                        'type' => $this->getType('Yard'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'Yard'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateReflectivePoint',
                        'type' => $this->getType('ReflectivePoint'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'ReflectivePoint'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReflectivePointUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createReflectivePoint',
                        'type' => $this->getType('ReflectivePoint'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'ReflectivePoint'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ReflectivePointCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteReflectivePoint',
                        'type' => $this->getType('ReflectivePoint'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'ReflectivePoint'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateThoughtlessEnd',
                        'type' => $this->getType('ThoughtlessEnd'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'ThoughtlessEnd'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ThoughtlessEndUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createThoughtlessEnd',
                        'type' => $this->getType('ThoughtlessEnd'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'ThoughtlessEnd'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('ThoughtlessEndCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteThoughtlessEnd',
                        'type' => $this->getType('ThoughtlessEnd'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'ThoughtlessEnd'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    ),
                    array(
                        'name' => 'updateRub',
                        'type' => $this->getType('Rub'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\UpdateResolverFactory::create(array('dataObjectClass' => 'Rub'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('RubUpdateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'createRub',
                        'type' => $this->getType('Rub'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\CreateResolverFactory::create(array('dataObjectClass' => 'Rub'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'Input',
                                'type' => GraphQL\Type\Definition\Type::nonNull($this->getType('RubCreateInputType'))
                            )
                        )
                    ),
                    array(
                        'name' => 'deleteRub',
                        'type' => $this->getType('Rub'),
                        'resolve' => SilverStripe\GraphQL\Scaffolding\Scaffolders\CRUD\ResolverFactories\DeleteResolverFactory::create(array('dataObjectClass' => 'Rub'))->createClosure(),
                        'args' => array(
                            array(
                                'name' => 'IDs',
                                'type' => GraphQL\Type\Definition\Type::nonNull(GraphQL\Type\Definition\Type::listOf(GraphQL\Type\Definition\Type::id()))
                            )
                        )
                    )
                );
            }
        ));
    }
}